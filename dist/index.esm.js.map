{"version":3,"file":"index.esm.js","sources":["../lib/schemas/config.js","../lib/envs.js","../lib/logger.js","../lib/utils.js","../lib/config.js","../lib/fetch.js","../lib/errors/ExportError.js","../lib/cache.js","../lib/highcharts.js","../lib/browser.js","../lib/export.js","../templates/svg_export/svg_export.js","../lib/pool.js","../lib/chart.js","../lib/sanitize.js","../lib/intervals.js","../lib/server/error.js","../lib/server/rate_limit.js","../lib/errors/HttpError.js","../lib/server/routes/change_hc_version.js","../lib/server/routes/export.js","../lib/server/routes/health.js","../lib/server/server.js","../lib/server/routes/ui.js","../lib/resource_release.js","../lib/index.js"],"sourcesContent":["/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// Possible names for Highcharts scripts\r\nexport const scriptsNames = {\r\n  core: ['highcharts', 'highcharts-more', 'highcharts-3d'],\r\n  modules: [\r\n    'stock',\r\n    'map',\r\n    'gantt',\r\n    'exporting',\r\n    'parallel-coordinates',\r\n    'accessibility',\r\n    // 'annotations-advanced',\r\n    'boost-canvas',\r\n    'boost',\r\n    'data',\r\n    'data-tools',\r\n    'draggable-points',\r\n    'static-scale',\r\n    'broken-axis',\r\n    'heatmap',\r\n    'tilemap',\r\n    'tiledwebmap',\r\n    'timeline',\r\n    'treemap',\r\n    'treegraph',\r\n    'item-series',\r\n    'drilldown',\r\n    'histogram-bellcurve',\r\n    'bullet',\r\n    'funnel',\r\n    'funnel3d',\r\n    'geoheatmap',\r\n    'pyramid3d',\r\n    'networkgraph',\r\n    'overlapping-datalabels',\r\n    'pareto',\r\n    'pattern-fill',\r\n    'pictorial',\r\n    'price-indicator',\r\n    'sankey',\r\n    'arc-diagram',\r\n    'dependency-wheel',\r\n    'series-label',\r\n    'series-on-point',\r\n    'solid-gauge',\r\n    'sonification',\r\n    // 'stock-tools',\r\n    'streamgraph',\r\n    'sunburst',\r\n    'variable-pie',\r\n    'variwide',\r\n    'vector',\r\n    'venn',\r\n    'windbarb',\r\n    'wordcloud',\r\n    'xrange',\r\n    'no-data-to-display',\r\n    'drag-panes',\r\n    'debugger',\r\n    'dumbbell',\r\n    'lollipop',\r\n    'cylinder',\r\n    'organization',\r\n    'dotplot',\r\n    'marker-clusters',\r\n    'hollowcandlestick',\r\n    'heikinashi',\r\n    'flowmap',\r\n    'export-data',\r\n    'navigator',\r\n    'textpath'\r\n  ],\r\n  indicators: ['indicators-all'],\r\n  custom: [\r\n    'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment.min.js',\r\n    'https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.45/moment-timezone-with-data.min.js'\r\n  ]\r\n};\r\n\r\n// This is the configuration object with all options and their default values,\r\n// also from the .env file if one exists\r\nexport const defaultConfig = {\r\n  puppeteer: {\r\n    args: {\r\n      value: [\r\n        '--allow-running-insecure-content',\r\n        '--ash-no-nudges',\r\n        '--autoplay-policy=user-gesture-required',\r\n        '--block-new-web-contents',\r\n        '--disable-accelerated-2d-canvas',\r\n        '--disable-background-networking',\r\n        '--disable-background-timer-throttling',\r\n        '--disable-backgrounding-occluded-windows',\r\n        '--disable-breakpad',\r\n        '--disable-checker-imaging',\r\n        '--disable-client-side-phishing-detection',\r\n        '--disable-component-extensions-with-background-pages',\r\n        '--disable-component-update',\r\n        '--disable-default-apps',\r\n        '--disable-dev-shm-usage',\r\n        '--disable-domain-reliability',\r\n        '--disable-extensions',\r\n        '--disable-features=CalculateNativeWinOcclusion,InterestFeedContentSuggestions,WebOTP',\r\n        '--disable-hang-monitor',\r\n        '--disable-ipc-flooding-protection',\r\n        '--disable-logging',\r\n        '--disable-notifications',\r\n        '--disable-offer-store-unmasked-wallet-cards',\r\n        '--disable-popup-blocking',\r\n        '--disable-print-preview',\r\n        '--disable-prompt-on-repost',\r\n        '--disable-renderer-backgrounding',\r\n        '--disable-search-engine-choice-screen',\r\n        '--disable-session-crashed-bubble',\r\n        '--disable-setuid-sandbox',\r\n        '--disable-site-isolation-trials',\r\n        '--disable-speech-api',\r\n        '--disable-sync',\r\n        '--enable-unsafe-webgpu',\r\n        '--hide-crash-restore-bubble',\r\n        '--hide-scrollbars',\r\n        '--metrics-recording-only',\r\n        '--mute-audio',\r\n        '--no-default-browser-check',\r\n        '--no-first-run',\r\n        '--no-pings',\r\n        '--no-sandbox',\r\n        '--no-startup-window',\r\n        '--no-zygote',\r\n        '--password-store=basic',\r\n        '--process-per-tab',\r\n        '--use-mock-keychain'\r\n      ],\r\n      type: 'string[]',\r\n      description: 'Arguments array to send to Puppeteer.'\r\n    }\r\n  },\r\n  highcharts: {\r\n    version: {\r\n      value: 'latest',\r\n      type: 'string',\r\n      envLink: 'HIGHCHARTS_VERSION',\r\n      description: 'The Highcharts version to be used.'\r\n    },\r\n    cdnURL: {\r\n      value: 'https://code.highcharts.com/',\r\n      type: 'string',\r\n      envLink: 'HIGHCHARTS_CDN_URL',\r\n      description: 'The CDN URL for Highcharts scripts to be used.'\r\n    },\r\n    coreScripts: {\r\n      value: scriptsNames.core,\r\n      type: 'string[]',\r\n      envLink: 'HIGHCHARTS_CORE_SCRIPTS',\r\n      description: 'The core Highcharts scripts to fetch.'\r\n    },\r\n    moduleScripts: {\r\n      value: scriptsNames.modules,\r\n      type: 'string[]',\r\n      envLink: 'HIGHCHARTS_MODULE_SCRIPTS',\r\n      description: 'The modules of Highcharts to fetch.'\r\n    },\r\n    indicatorScripts: {\r\n      value: scriptsNames.indicators,\r\n      type: 'string[]',\r\n      envLink: 'HIGHCHARTS_INDICATOR_SCRIPTS',\r\n      description: 'The indicators of Highcharts to fetch.'\r\n    },\r\n    customScripts: {\r\n      value: scriptsNames.custom,\r\n      type: 'string[]',\r\n      description: 'Additional custom scripts or dependencies to fetch.'\r\n    },\r\n    forceFetch: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'HIGHCHARTS_FORCE_FETCH',\r\n      description:\r\n        'The flag to determine whether to refetch all scripts after each server rerun.'\r\n    },\r\n    cachePath: {\r\n      value: '.cache',\r\n      type: 'string',\r\n      envLink: 'HIGHCHARTS_CACHE_PATH',\r\n      description:\r\n        'The path to the cache directory. It is used to store the Highcharts scripts and custom scripts.'\r\n    }\r\n  },\r\n  export: {\r\n    infile: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'The input file should include a name and a type (json or svg). It must be correctly formatted as a JSON or SVG file.'\r\n    },\r\n    instr: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Input, provided in the form of a stringified JSON or SVG file, will override the --infile option.'\r\n    },\r\n    options: {\r\n      value: false,\r\n      type: 'string',\r\n      description: 'An alias for the --instr option.'\r\n    },\r\n    outfile: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'The output filename along with a type (jpeg, png, pdf, or svg). This will ignore the --type flag.'\r\n    },\r\n    type: {\r\n      value: 'png',\r\n      type: 'string',\r\n      envLink: 'EXPORT_TYPE',\r\n      description: 'The file export format. It can be jpeg, png, pdf, or svg.'\r\n    },\r\n    constr: {\r\n      value: 'chart',\r\n      type: 'string',\r\n      envLink: 'EXPORT_CONSTR',\r\n      description:\r\n        'The constructor to use. Can be chart, stockChart, mapChart, or ganttChart.'\r\n    },\r\n    defaultHeight: {\r\n      value: 400,\r\n      type: 'number',\r\n      envLink: 'EXPORT_DEFAULT_HEIGHT',\r\n      description:\r\n        'the default height of the exported chart. Used when no value is set.'\r\n    },\r\n    defaultWidth: {\r\n      value: 600,\r\n      type: 'number',\r\n      envLink: 'EXPORT_DEFAULT_WIDTH',\r\n      description:\r\n        'The default width of the exported chart. Used when no value is set.'\r\n    },\r\n    defaultScale: {\r\n      value: 1,\r\n      type: 'number',\r\n      envLink: 'EXPORT_DEFAULT_SCALE',\r\n      description:\r\n        'The default scale of the exported chart. Used when no value is set.'\r\n    },\r\n    height: {\r\n      value: false,\r\n      type: 'number',\r\n      description:\r\n        'The height of the exported chart, overriding the option in the chart settings.'\r\n    },\r\n    width: {\r\n      value: false,\r\n      type: 'number',\r\n      description:\r\n        'The width of the exported chart, overriding the option in the chart settings.'\r\n    },\r\n    scale: {\r\n      value: false,\r\n      type: 'number',\r\n      description:\r\n        'The scale of the exported chart, overriding the option in the chart settings. Ranges between 0.1 and 5.0.'\r\n    },\r\n    globalOptions: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Either a stringified JSON or a filename containing options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    themeOptions: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Either a stringified JSON or a filename containing theme options to be passed into the Highcharts.setOptions.'\r\n    },\r\n    batch: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Initiates a batch job with a string containing input/output pairs: \"in=out;in=out;...\".'\r\n    },\r\n    rasterizationTimeout: {\r\n      value: 1500,\r\n      type: 'number',\r\n      envLink: 'EXPORT_RASTERIZATION_TIMEOUT',\r\n      description:\r\n        'The duration in milliseconds to wait for rendering a webpage.'\r\n    }\r\n  },\r\n  customLogic: {\r\n    allowCodeExecution: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'CUSTOM_LOGIC_ALLOW_CODE_EXECUTION',\r\n      description:\r\n        'Controls whether the execution of arbitrary code is allowed during the exporting process.'\r\n    },\r\n    allowFileResources: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'CUSTOM_LOGIC_ALLOW_FILE_RESOURCES',\r\n      description:\r\n        'Controls the ability to inject resources from the filesystem. This setting has no effect when running as a server.'\r\n    },\r\n    customCode: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Custom code to execute before chart initialization. It can be a function, code wrapped within a function, or a filename with the .js extension.'\r\n    },\r\n    callback: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'JavaScript code to run during construction. It can be a function or a filename with the .js extension.'\r\n    },\r\n    resources: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Additional resource in the form of a stringified JSON, which may contain files, js, and css sections.'\r\n    },\r\n    loadConfig: {\r\n      value: false,\r\n      type: 'string',\r\n      legacyName: 'fromFile',\r\n      description: 'A file containing a pre-defined configuration to use.'\r\n    },\r\n    createConfig: {\r\n      value: false,\r\n      type: 'string',\r\n      description:\r\n        'Enables setting options through a prompt and saving them in a provided config file.'\r\n    }\r\n  },\r\n  server: {\r\n    enable: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'SERVER_ENABLE',\r\n      cliName: 'enableServer',\r\n      description:\r\n        'When set to true, the server starts on the local IP address 0.0.0.0.'\r\n    },\r\n    host: {\r\n      value: '0.0.0.0',\r\n      type: 'string',\r\n      envLink: 'SERVER_HOST',\r\n      description:\r\n        'The hostname of the server. Additionally, it starts a server on the provided hostname.'\r\n    },\r\n    port: {\r\n      value: 7801,\r\n      type: 'number',\r\n      envLink: 'SERVER_PORT',\r\n      description: 'The server port when enabled.'\r\n    },\r\n    benchmarking: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'SERVER_BENCHMARKING',\r\n      cliName: 'serverBenchmarking',\r\n      description:\r\n        'Indicates whether to display the duration, in milliseconds, of specific actions that occur on the server while serving a request.'\r\n    },\r\n    proxy: {\r\n      host: {\r\n        value: false,\r\n        type: 'string',\r\n        envLink: 'SERVER_PROXY_HOST',\r\n        cliName: 'proxyHost',\r\n        description: 'The host of the proxy server to use, if it exists.'\r\n      },\r\n      port: {\r\n        value: 8080,\r\n        type: 'number',\r\n        envLink: 'SERVER_PROXY_PORT',\r\n        cliName: 'proxyPort',\r\n        description: 'The port of the proxy server to use, if it exists.'\r\n      },\r\n      timeout: {\r\n        value: 5000,\r\n        type: 'number',\r\n        envLink: 'SERVER_PROXY_TIMEOUT',\r\n        cliName: 'proxyTimeout',\r\n        description: 'The timeout for the proxy server to use, if it exists.'\r\n      }\r\n    },\r\n    rateLimiting: {\r\n      enable: {\r\n        value: false,\r\n        type: 'boolean',\r\n        envLink: 'SERVER_RATE_LIMITING_ENABLE',\r\n        cliName: 'enableRateLimiting',\r\n        description: 'Enables rate limiting for the server.'\r\n      },\r\n      maxRequests: {\r\n        value: 10,\r\n        type: 'number',\r\n        envLink: 'SERVER_RATE_LIMITING_MAX_REQUESTS',\r\n        legacyName: 'rateLimit',\r\n        description: 'The maximum number of requests allowed in one minute.'\r\n      },\r\n      window: {\r\n        value: 1,\r\n        type: 'number',\r\n        envLink: 'SERVER_RATE_LIMITING_WINDOW',\r\n        description: 'The time window, in minutes, for the rate limiting.'\r\n      },\r\n      delay: {\r\n        value: 0,\r\n        type: 'number',\r\n        envLink: 'SERVER_RATE_LIMITING_DELAY',\r\n        description:\r\n          'The delay duration for each successive request before reaching the maximum limit.'\r\n      },\r\n      trustProxy: {\r\n        value: false,\r\n        type: 'boolean',\r\n        envLink: 'SERVER_RATE_LIMITING_TRUST_PROXY',\r\n        description: 'Set this to true if the server is behind a load balancer.'\r\n      },\r\n      skipKey: {\r\n        value: false,\r\n        type: 'string',\r\n        envLink: 'SERVER_RATE_LIMITING_SKIP_KEY',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with the skipToken argument.'\r\n      },\r\n      skipToken: {\r\n        value: false,\r\n        type: 'string',\r\n        envLink: 'SERVER_RATE_LIMITING_SKIP_TOKEN',\r\n        description:\r\n          'Allows bypassing the rate limiter and should be provided with the skipKey argument.'\r\n      }\r\n    },\r\n    ssl: {\r\n      enable: {\r\n        value: false,\r\n        type: 'boolean',\r\n        envLink: 'SERVER_SSL_ENABLE',\r\n        cliName: 'enableSsl',\r\n        description: 'Enables or disables the SSL protocol.'\r\n      },\r\n      force: {\r\n        value: false,\r\n        type: 'boolean',\r\n        envLink: 'SERVER_SSL_FORCE',\r\n        cliName: 'sslForce',\r\n        legacyName: 'sslOnly',\r\n        description:\r\n          'When set to true, the server is forced to serve only over HTTPS.'\r\n      },\r\n      port: {\r\n        value: 443,\r\n        type: 'number',\r\n        envLink: 'SERVER_SSL_PORT',\r\n        cliName: 'sslPort',\r\n        description: 'The port on which to run the SSL server.'\r\n      },\r\n      certPath: {\r\n        value: false,\r\n        type: 'string',\r\n        envLink: 'SERVER_SSL_CERT_PATH',\r\n        legacyName: 'sslPath',\r\n        description: 'The path to the SSL certificate/key file.'\r\n      }\r\n    }\r\n  },\r\n  pool: {\r\n    minWorkers: {\r\n      value: 4,\r\n      type: 'number',\r\n      envLink: 'POOL_MIN_WORKERS',\r\n      description: 'The number of minimum and initial pool workers to spawn.'\r\n    },\r\n    maxWorkers: {\r\n      value: 8,\r\n      type: 'number',\r\n      envLink: 'POOL_MAX_WORKERS',\r\n      legacyName: 'workers',\r\n      description: 'The number of maximum pool workers to spawn.'\r\n    },\r\n    workLimit: {\r\n      value: 40,\r\n      type: 'number',\r\n      envLink: 'POOL_WORK_LIMIT',\r\n      description:\r\n        'The number of work pieces that can be performed before restarting the worker process.'\r\n    },\r\n    acquireTimeout: {\r\n      value: 5000,\r\n      type: 'number',\r\n      envLink: 'POOL_ACQUIRE_TIMEOUT',\r\n      description:\r\n        'The duration, in milliseconds, to wait for acquiring a resource.'\r\n    },\r\n    createTimeout: {\r\n      value: 5000,\r\n      type: 'number',\r\n      envLink: 'POOL_CREATE_TIMEOUT',\r\n      description:\r\n        'The duration, in milliseconds, to wait for creating a resource.'\r\n    },\r\n    destroyTimeout: {\r\n      value: 5000,\r\n      type: 'number',\r\n      envLink: 'POOL_DESTROY_TIMEOUT',\r\n      description:\r\n        'The duration, in milliseconds, to wait for destroying a resource.'\r\n    },\r\n    idleTimeout: {\r\n      value: 30000,\r\n      type: 'number',\r\n      envLink: 'POOL_IDLE_TIMEOUT',\r\n      description:\r\n        'The duration, in milliseconds, after which an idle resource is destroyed.'\r\n    },\r\n    createRetryInterval: {\r\n      value: 200,\r\n      type: 'number',\r\n      envLink: 'POOL_CREATE_RETRY_INTERVAL',\r\n      description:\r\n        'The duration, in milliseconds, to wait before retrying the create process in case of a failure.'\r\n    },\r\n    reaperInterval: {\r\n      value: 1000,\r\n      type: 'number',\r\n      envLink: 'POOL_REAPER_INTERVAL',\r\n      description:\r\n        'The duration, in milliseconds, after which the check for idle resources to destroy is triggered.'\r\n    },\r\n    benchmarking: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'POOL_BENCHMARKING',\r\n      cliName: 'poolBenchmarking',\r\n      description:\r\n        'Indicate whether to show statistics for the pool of resources or not.'\r\n    }\r\n  },\r\n  logging: {\r\n    level: {\r\n      value: 4,\r\n      type: 'number',\r\n      envLink: 'LOGGING_LEVEL',\r\n      cliName: 'logLevel',\r\n      description: 'The logging level to be used.'\r\n    },\r\n    file: {\r\n      value: 'highcharts-export-server.log',\r\n      type: 'string',\r\n      envLink: 'LOGGING_FILE',\r\n      cliName: 'logFile',\r\n      description:\r\n        'The name of a log file. The `logToFile` and `logDest` options also need to be set to enable file logging.'\r\n    },\r\n    dest: {\r\n      value: 'log/',\r\n      type: 'string',\r\n      envLink: 'LOGGING_DEST',\r\n      cliName: 'logDest',\r\n      description:\r\n        'The path to store log files. The `logToFile` option also needs to be set to enable file logging.'\r\n    },\r\n    toConsole: {\r\n      value: true,\r\n      type: 'boolean',\r\n      envLink: 'LOGGING_TO_CONSOLE',\r\n      cliName: 'logToConsole',\r\n      description: 'Enables or disables showing logs in the console.'\r\n    },\r\n    toFile: {\r\n      value: true,\r\n      type: 'boolean',\r\n      envLink: 'LOGGING_TO_FILE',\r\n      cliName: 'logToFile',\r\n      description:\r\n        'Enables or disables creation of the log directory and saving the log into a .log file.'\r\n    }\r\n  },\r\n  ui: {\r\n    enable: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'UI_ENABLE',\r\n      cliName: 'enableUi',\r\n      description:\r\n        'Enables or disables the user interface (UI) for the export server.'\r\n    },\r\n    route: {\r\n      value: '/',\r\n      type: 'string',\r\n      envLink: 'UI_ROUTE',\r\n      cliName: 'uiRoute',\r\n      description:\r\n        'The endpoint route to which the user interface (UI) should be attached.'\r\n    }\r\n  },\r\n  other: {\r\n    nodeEnv: {\r\n      value: 'production',\r\n      type: 'string',\r\n      envLink: 'OTHER_NODE_ENV',\r\n      description: 'The type of Node.js environment.'\r\n    },\r\n    listenToProcessExits: {\r\n      value: true,\r\n      type: 'boolean',\r\n      envLink: 'OTHER_LISTEN_TO_PROCESS_EXITS',\r\n      description: 'Decides whether or not to attach process.exit handlers.'\r\n    },\r\n    noLogo: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'OTHER_NO_LOGO',\r\n      description:\r\n        'Skip printing the logo on a startup. Will be replaced by a simple text.'\r\n    },\r\n    hardResetPage: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'OTHER_HARD_RESET_PAGE',\r\n      description: 'Decides if the page content should be reset entirely.'\r\n    },\r\n    browserShellMode: {\r\n      value: true,\r\n      type: 'boolean',\r\n      envLink: 'OTHER_BROWSER_SHELL_MODE',\r\n      description: 'Decides if the browser runs in the shell mode.'\r\n    }\r\n  },\r\n  debug: {\r\n    enable: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'DEBUG_ENABLE',\r\n      cliName: 'enableDebug',\r\n      description: 'Enables or disables debug mode for the underlying browser.'\r\n    },\r\n    headless: {\r\n      value: true,\r\n      type: 'boolean',\r\n      envLink: 'DEBUG_HEADLESS',\r\n      description:\r\n        'Controls the mode in which the browser is launched when in the debug mode.'\r\n    },\r\n    devtools: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'DEBUG_DEVTOOLS',\r\n      description:\r\n        'Decides whether to enable DevTools when the browser is in a headful state.'\r\n    },\r\n    listenToConsole: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'DEBUG_LISTEN_TO_CONSOLE',\r\n      description:\r\n        'Decides whether to enable a listener for console messages sent from the browser.'\r\n    },\r\n    dumpio: {\r\n      value: false,\r\n      type: 'boolean',\r\n      envLink: 'DEBUG_DUMPIO',\r\n      description:\r\n        'Redirects browser process stdout and stderr to process.stdout and process.stderr.'\r\n    },\r\n    slowMo: {\r\n      value: 0,\r\n      type: 'number',\r\n      envLink: 'DEBUG_SLOW_MO',\r\n      description:\r\n        'Slows down Puppeteer operations by the specified number of milliseconds.'\r\n    },\r\n    debuggingPort: {\r\n      value: 9222,\r\n      type: 'number',\r\n      envLink: 'DEBUG_DEBUGGING_PORT',\r\n      description: 'Specifies the debugging port.'\r\n    }\r\n  }\r\n};\r\n\r\n// The config descriptions object for the prompts functionality. It contains\r\n// information like:\r\n// * Type of a prompt\r\n// * Name of an option\r\n// * Short description of a chosen option\r\n// * Initial value\r\nexport const promptsConfig = {\r\n  puppeteer: [\r\n    {\r\n      type: 'list',\r\n      name: 'args',\r\n      message: 'Puppeteer arguments',\r\n      initial: defaultConfig.puppeteer.args.value.join(','),\r\n      separator: ','\r\n    }\r\n  ],\r\n  highcharts: [\r\n    {\r\n      type: 'text',\r\n      name: 'version',\r\n      message: 'Highcharts version',\r\n      initial: defaultConfig.highcharts.version.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'cdnURL',\r\n      message: 'The URL of CDN',\r\n      initial: defaultConfig.highcharts.cdnURL.value\r\n    },\r\n    {\r\n      type: 'multiselect',\r\n      name: 'coreScripts',\r\n      message: 'Available core scripts',\r\n      instructions: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      choices: defaultConfig.highcharts.coreScripts.value\r\n    },\r\n    {\r\n      type: 'multiselect',\r\n      name: 'moduleScripts',\r\n      message: 'Available module scripts',\r\n      instructions: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      choices: defaultConfig.highcharts.moduleScripts.value\r\n    },\r\n    {\r\n      type: 'multiselect',\r\n      name: 'indicatorScripts',\r\n      message: 'Available indicator scripts',\r\n      instructions: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      choices: defaultConfig.highcharts.indicatorScripts.value\r\n    },\r\n    {\r\n      type: 'list',\r\n      name: 'customScripts',\r\n      message: 'Custom scripts',\r\n      initial: defaultConfig.highcharts.customScripts.value.join(','),\r\n      separator: ','\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'forceFetch',\r\n      message: 'Force re-fetch the scripts',\r\n      initial: defaultConfig.highcharts.forceFetch.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'cachePath',\r\n      message: 'The path to the cache directory',\r\n      initial: defaultConfig.highcharts.cachePath.value\r\n    }\r\n  ],\r\n  export: [\r\n    {\r\n      type: 'select',\r\n      name: 'type',\r\n      message: 'The default export file type',\r\n      hint: `Default: ${defaultConfig.export.type.value}`,\r\n      initial: 0,\r\n      choices: ['png', 'jpeg', 'pdf', 'svg']\r\n    },\r\n    {\r\n      type: 'select',\r\n      name: 'constr',\r\n      message: 'The default constructor for Highcharts',\r\n      hint: `Default: ${defaultConfig.export.constr.value}`,\r\n      initial: 0,\r\n      choices: ['chart', 'stockChart', 'mapChart', 'ganttChart']\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultHeight',\r\n      message: 'The default fallback height of the exported chart',\r\n      initial: defaultConfig.export.defaultHeight.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultWidth',\r\n      message: 'The default fallback width of the exported chart',\r\n      initial: defaultConfig.export.defaultWidth.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'defaultScale',\r\n      message: 'The default fallback scale of the exported chart',\r\n      initial: defaultConfig.export.defaultScale.value,\r\n      min: 0.1,\r\n      max: 5\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rasterizationTimeout',\r\n      message: 'The rendering webpage timeout in milliseconds',\r\n      initial: defaultConfig.export.rasterizationTimeout.value\r\n    }\r\n  ],\r\n  customLogic: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowCodeExecution',\r\n      message: 'Enable execution of custom code',\r\n      initial: defaultConfig.customLogic.allowCodeExecution.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'allowFileResources',\r\n      message: 'Enable file resources',\r\n      initial: defaultConfig.customLogic.allowFileResources.value\r\n    }\r\n  ],\r\n  server: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Starts the server on 0.0.0.0',\r\n      initial: defaultConfig.server.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'host',\r\n      message: 'Server hostname',\r\n      initial: defaultConfig.server.host.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'port',\r\n      message: 'Server port',\r\n      initial: defaultConfig.server.port.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'benchmarking',\r\n      message: 'Enable server benchmarking',\r\n      initial: defaultConfig.server.benchmarking.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'proxy.host',\r\n      message: 'The host of the proxy server to use',\r\n      initial: defaultConfig.server.proxy.host.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'proxy.port',\r\n      message: 'The port of the proxy server to use',\r\n      initial: defaultConfig.server.proxy.port.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'proxy.timeout',\r\n      message: 'The timeout for the proxy server to use',\r\n      initial: defaultConfig.server.proxy.timeout.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.enable',\r\n      message: 'Enable rate limiting',\r\n      initial: defaultConfig.server.rateLimiting.enable.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.maxRequests',\r\n      message: 'The maximum requests allowed per minute',\r\n      initial: defaultConfig.server.rateLimiting.maxRequests.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.window',\r\n      message: 'The rate-limiting time window in minutes',\r\n      initial: defaultConfig.server.rateLimiting.window.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'rateLimiting.delay',\r\n      message:\r\n        'The delay for each successive request before reaching the maximum',\r\n      initial: defaultConfig.server.rateLimiting.delay.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'rateLimiting.trustProxy',\r\n      message: 'Set to true if behind a load balancer',\r\n      initial: defaultConfig.server.rateLimiting.trustProxy.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipKey',\r\n      message:\r\n        'Allows bypassing the rate limiter when provided with the skipToken argument',\r\n      initial: defaultConfig.server.rateLimiting.skipKey.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'rateLimiting.skipToken',\r\n      message:\r\n        'Allows bypassing the rate limiter when provided with the skipKey argument',\r\n      initial: defaultConfig.server.rateLimiting.skipToken.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.enable',\r\n      message: 'Enable SSL protocol',\r\n      initial: defaultConfig.server.ssl.enable.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'ssl.force',\r\n      message: 'Force serving only over HTTPS',\r\n      initial: defaultConfig.server.ssl.force.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'ssl.port',\r\n      message: 'SSL server port',\r\n      initial: defaultConfig.server.ssl.port.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'ssl.certPath',\r\n      message: 'The path to find the SSL certificate/key',\r\n      initial: defaultConfig.server.ssl.certPath.value\r\n    }\r\n  ],\r\n  pool: [\r\n    {\r\n      type: 'number',\r\n      name: 'minWorkers',\r\n      message: 'The initial number of workers to spawn',\r\n      initial: defaultConfig.pool.minWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'maxWorkers',\r\n      message: 'The maximum number of workers to spawn',\r\n      initial: defaultConfig.pool.maxWorkers.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'workLimit',\r\n      message:\r\n        'The pieces of work that can be performed before restarting a Puppeteer process',\r\n      initial: defaultConfig.pool.workLimit.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'acquireTimeout',\r\n      message: 'The number of milliseconds to wait for acquiring a resource',\r\n      initial: defaultConfig.pool.acquireTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'createTimeout',\r\n      message: 'The number of milliseconds to wait for creating a resource',\r\n      initial: defaultConfig.pool.createTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'destroyTimeout',\r\n      message: 'The number of milliseconds to wait for destroying a resource',\r\n      initial: defaultConfig.pool.destroyTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'idleTimeout',\r\n      message: 'The number of milliseconds after an idle resource is destroyed',\r\n      initial: defaultConfig.pool.idleTimeout.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'createRetryInterval',\r\n      message:\r\n        'The retry interval in milliseconds after a create process fails',\r\n      initial: defaultConfig.pool.createRetryInterval.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'reaperInterval',\r\n      message:\r\n        'The reaper interval in milliseconds after triggering the check for idle resources to destroy',\r\n      initial: defaultConfig.pool.reaperInterval.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'benchmarking',\r\n      message: 'Enable benchmarking for a resource pool',\r\n      initial: defaultConfig.pool.benchmarking.value\r\n    }\r\n  ],\r\n  logging: [\r\n    {\r\n      type: 'number',\r\n      name: 'level',\r\n      message:\r\n        'The log level (0: silent, 1: error, 2: warning, 3: notice, 4: verbose, 5: benchmark)',\r\n      initial: defaultConfig.logging.level.value,\r\n      round: 0,\r\n      min: 0,\r\n      max: 5\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'file',\r\n      message:\r\n        'A log file name. Set with --toFile and --logDest to enable file logging',\r\n      initial: defaultConfig.logging.file.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'dest',\r\n      message: 'The path to a log file when the file logging is enabled',\r\n      initial: defaultConfig.logging.dest.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'toConsole',\r\n      message: 'Enable logging to the console',\r\n      initial: defaultConfig.logging.toConsole.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'toFile',\r\n      message: 'Enables logging to a file',\r\n      initial: defaultConfig.logging.toFile.value\r\n    }\r\n  ],\r\n  ui: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Enable UI for the export server',\r\n      initial: defaultConfig.ui.enable.value\r\n    },\r\n    {\r\n      type: 'text',\r\n      name: 'route',\r\n      message: 'A route to attach the UI',\r\n      initial: defaultConfig.ui.route.value\r\n    }\r\n  ],\r\n  other: [\r\n    {\r\n      type: 'text',\r\n      name: 'nodeEnv',\r\n      message: 'The type of Node.js environment',\r\n      initial: defaultConfig.other.nodeEnv.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'listenToProcessExits',\r\n      message: 'Set to false to skip attaching process.exit handlers',\r\n      initial: defaultConfig.other.listenToProcessExits.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'noLogo',\r\n      message: 'Skip printing the logo on startup. Replaced by simple text',\r\n      initial: defaultConfig.other.noLogo.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'hardResetPage',\r\n      message: 'Decides if the page content should be reset entirely',\r\n      initial: defaultConfig.other.hardResetPage.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'browserShellMode',\r\n      message: 'Decides if the browser runs in the shell mode',\r\n      initial: defaultConfig.other.browserShellMode.value\r\n    }\r\n  ],\r\n  debug: [\r\n    {\r\n      type: 'toggle',\r\n      name: 'enable',\r\n      message: 'Enables debug mode for the browser instance',\r\n      initial: defaultConfig.debug.enable.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'headless',\r\n      message: 'The mode setting for the browser',\r\n      initial: defaultConfig.debug.headless.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'devtools',\r\n      message: 'The DevTools for the headful browser',\r\n      initial: defaultConfig.debug.devtools.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'listenToConsole',\r\n      message: 'The event listener for console messages from the browser',\r\n      initial: defaultConfig.debug.listenToConsole.value\r\n    },\r\n    {\r\n      type: 'toggle',\r\n      name: 'dumpio',\r\n      message: 'Redirects the browser stdout and stderr to NodeJS process',\r\n      initial: defaultConfig.debug.dumpio.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'slowMo',\r\n      message: 'Puppeteer operations slow down in milliseconds',\r\n      initial: defaultConfig.debug.slowMo.value\r\n    },\r\n    {\r\n      type: 'number',\r\n      name: 'debuggingPort',\r\n      message: 'The port number for debugging',\r\n      initial: defaultConfig.debug.debuggingPort.value\r\n    }\r\n  ]\r\n};\r\n\r\n// Absolute props that, in case of merging recursively, need to be force merged\r\nexport const absoluteProps = [\r\n  'options',\r\n  'globalOptions',\r\n  'themeOptions',\r\n  'resources',\r\n  'payload'\r\n];\r\n\r\n// Argument nesting level of all export server options\r\nexport const nestedArgs = {};\r\n\r\n/**\r\n * Recursively creates a chain of nested arguments from an object.\r\n *\r\n * @param {Object} obj - The object containing nested arguments.\r\n * @param {string} propChain - The current chain of nested properties\r\n * (used internally during recursion).\r\n */\r\nconst createNestedArgs = (obj, propChain = '') => {\r\n  Object.keys(obj).forEach((k) => {\r\n    if (!['puppeteer', 'highcharts'].includes(k)) {\r\n      const entry = obj[k];\r\n      if (typeof entry.value === 'undefined') {\r\n        // Go deeper in the nested arguments\r\n        createNestedArgs(entry, `${propChain}.${k}`);\r\n      } else {\r\n        // Create the chain of nested arguments\r\n        nestedArgs[entry.cliName || k] = `${propChain}.${k}`.substring(1);\r\n\r\n        // Support for the legacy, PhantomJS properties names\r\n        if (entry.legacyName !== undefined) {\r\n          nestedArgs[entry.legacyName] = `${propChain}.${k}`.substring(1);\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\ncreateNestedArgs(defaultConfig);\r\n","/**\r\n * @fileoverview\r\n * This file is responsible for parsing the environment variables with the 'zod'\r\n * library. The parsed environment variables are then exported to be used\r\n * in the application as \"envs\". We should not use process.env directly\r\n * in the application as these would not be parsed properly.\r\n *\r\n * The environment variables are parsed and validated only once when\r\n * the application starts. We should write a custom validator or a transformer\r\n * for each of the options.\r\n */\r\n\r\nimport dotenv from 'dotenv';\r\nimport { z } from 'zod';\r\n\r\nimport { scriptsNames } from './schemas/config.js';\r\n\r\n// Load .env into environment variables\r\ndotenv.config();\r\n\r\n// Object with custom validators and transformers, to avoid repetition\r\n// in the Config object\r\nconst v = {\r\n  // Splits string value into elements in an array, trims every element, checks\r\n  // if an array is correct, if it is empty, and if it is, returns undefined\r\n  array: (filterArray) =>\r\n    z\r\n      .string()\r\n      .transform((value) =>\r\n        value\r\n          .split(',')\r\n          .map((value) => value.trim())\r\n          .filter((value) => filterArray.includes(value))\r\n      )\r\n      .transform((value) => (value.length ? value : undefined)),\r\n\r\n  // Allows only true, false and correctly parse the value to boolean\r\n  // or no value in which case the returned value will be undefined\r\n  boolean: () =>\r\n    z\r\n      .enum(['true', 'false', ''])\r\n      .transform((value) => (value !== '' ? value === 'true' : undefined)),\r\n\r\n  // Allows passed values or no value in which case the returned value will\r\n  // be undefined\r\n  enum: (values) =>\r\n    z\r\n      .enum([...values, ''])\r\n      .transform((value) => (value !== '' ? value : undefined)),\r\n\r\n  // Trims the string value and checks if it is empty or contains stringified\r\n  // values such as false, undefined, null, NaN, if it does, returns undefined\r\n  string: () =>\r\n    z\r\n      .string()\r\n      .trim()\r\n      .refine(\r\n        (value) =>\r\n          !['false', 'undefined', 'null', 'NaN'].includes(value) ||\r\n          value === '',\r\n        (value) => ({\r\n          message: `The string contains forbidden values, received '${value}'`\r\n        })\r\n      )\r\n      .transform((value) => (value !== '' ? value : undefined)),\r\n\r\n  // Allows positive numbers or no value in which case the returned value will\r\n  // be undefined\r\n  positiveNum: () =>\r\n    z\r\n      .string()\r\n      .trim()\r\n      .refine(\r\n        (value) =>\r\n          value === '' || (!isNaN(parseFloat(value)) && parseFloat(value) > 0),\r\n        (value) => ({\r\n          message: `The value must be numeric and positive, received '${value}'`\r\n        })\r\n      )\r\n      .transform((value) => (value !== '' ? parseFloat(value) : undefined)),\r\n\r\n  // Allows non-negative numbers or no value in which case the returned value\r\n  // will be undefined\r\n  nonNegativeNum: () =>\r\n    z\r\n      .string()\r\n      .trim()\r\n      .refine(\r\n        (value) =>\r\n          value === '' || (!isNaN(parseFloat(value)) && parseFloat(value) >= 0),\r\n        (value) => ({\r\n          message: `The value must be numeric and non-negative, received '${value}'`\r\n        })\r\n      )\r\n      .transform((value) => (value !== '' ? parseFloat(value) : undefined))\r\n};\r\n\r\nexport const Config = z.object({\r\n  // highcharts\r\n  HIGHCHARTS_VERSION: z\r\n    .string()\r\n    .trim()\r\n    .refine(\r\n      (value) => /^(latest|\\d+(\\.\\d+){0,2})$/.test(value) || value === '',\r\n      (value) => ({\r\n        message: `HIGHCHARTS_VERSION must be 'latest', a major version, or in the form XX.YY.ZZ, received '${value}'`\r\n      })\r\n    )\r\n    .transform((value) => (value !== '' ? value : undefined)),\r\n  HIGHCHARTS_CDN_URL: z\r\n    .string()\r\n    .trim()\r\n    .refine(\r\n      (value) =>\r\n        value.startsWith('https://') ||\r\n        value.startsWith('http://') ||\r\n        value === '',\r\n      (value) => ({\r\n        message: `Invalid value for HIGHCHARTS_CDN_URL. It should start with http:// or https://, received '${value}'`\r\n      })\r\n    )\r\n    .transform((value) => (value !== '' ? value : undefined)),\r\n  HIGHCHARTS_CORE_SCRIPTS: v.array(scriptsNames.core),\r\n  HIGHCHARTS_MODULE_SCRIPTS: v.array(scriptsNames.modules),\r\n  HIGHCHARTS_INDICATOR_SCRIPTS: v.array(scriptsNames.indicators),\r\n  HIGHCHARTS_FORCE_FETCH: v.boolean(),\r\n  HIGHCHARTS_CACHE_PATH: v.string(),\r\n  HIGHCHARTS_ADMIN_TOKEN: v.string(),\r\n\r\n  // export\r\n  EXPORT_TYPE: v.enum(['jpeg', 'png', 'pdf', 'svg']),\r\n  EXPORT_CONSTR: v.enum(['chart', 'stockChart', 'mapChart', 'ganttChart']),\r\n  EXPORT_DEFAULT_HEIGHT: v.positiveNum(),\r\n  EXPORT_DEFAULT_WIDTH: v.positiveNum(),\r\n  EXPORT_DEFAULT_SCALE: v.positiveNum(),\r\n  EXPORT_RASTERIZATION_TIMEOUT: v.nonNegativeNum(),\r\n\r\n  // custom\r\n  CUSTOM_LOGIC_ALLOW_CODE_EXECUTION: v.boolean(),\r\n  CUSTOM_LOGIC_ALLOW_FILE_RESOURCES: v.boolean(),\r\n\r\n  // server\r\n  SERVER_ENABLE: v.boolean(),\r\n  SERVER_HOST: v.string(),\r\n  SERVER_PORT: v.positiveNum(),\r\n  SERVER_BENCHMARKING: v.boolean(),\r\n\r\n  // server proxy\r\n  SERVER_PROXY_HOST: v.string(),\r\n  SERVER_PROXY_PORT: v.positiveNum(),\r\n  SERVER_PROXY_TIMEOUT: v.nonNegativeNum(),\r\n\r\n  // server rate limiting\r\n  SERVER_RATE_LIMITING_ENABLE: v.boolean(),\r\n  SERVER_RATE_LIMITING_MAX_REQUESTS: v.nonNegativeNum(),\r\n  SERVER_RATE_LIMITING_WINDOW: v.nonNegativeNum(),\r\n  SERVER_RATE_LIMITING_DELAY: v.nonNegativeNum(),\r\n  SERVER_RATE_LIMITING_TRUST_PROXY: v.boolean(),\r\n  SERVER_RATE_LIMITING_SKIP_KEY: v.string(),\r\n  SERVER_RATE_LIMITING_SKIP_TOKEN: v.string(),\r\n\r\n  // server ssl\r\n  SERVER_SSL_ENABLE: v.boolean(),\r\n  SERVER_SSL_FORCE: v.boolean(),\r\n  SERVER_SSL_PORT: v.positiveNum(),\r\n  SERVER_SSL_CERT_PATH: v.string(),\r\n\r\n  // pool\r\n  POOL_MIN_WORKERS: v.nonNegativeNum(),\r\n  POOL_MAX_WORKERS: v.nonNegativeNum(),\r\n  POOL_WORK_LIMIT: v.positiveNum(),\r\n  POOL_ACQUIRE_TIMEOUT: v.nonNegativeNum(),\r\n  POOL_CREATE_TIMEOUT: v.nonNegativeNum(),\r\n  POOL_DESTROY_TIMEOUT: v.nonNegativeNum(),\r\n  POOL_IDLE_TIMEOUT: v.nonNegativeNum(),\r\n  POOL_CREATE_RETRY_INTERVAL: v.nonNegativeNum(),\r\n  POOL_REAPER_INTERVAL: v.nonNegativeNum(),\r\n  POOL_BENCHMARKING: v.boolean(),\r\n\r\n  // logger\r\n  LOGGING_LEVEL: z\r\n    .string()\r\n    .trim()\r\n    .refine(\r\n      (value) =>\r\n        value === '' ||\r\n        (!isNaN(parseFloat(value)) &&\r\n          parseFloat(value) >= 0 &&\r\n          parseFloat(value) <= 5),\r\n      (value) => ({\r\n        message: `Invalid value for LOGGING_LEVEL. We only accept values from 0 to 5 as logging levels, received '${value}'`\r\n      })\r\n    )\r\n    .transform((value) => (value !== '' ? parseFloat(value) : undefined)),\r\n  LOGGING_FILE: v.string(),\r\n  LOGGING_DEST: v.string(),\r\n  LOGGING_TO_CONSOLE: v.boolean(),\r\n  LOGGING_TO_FILE: v.boolean(),\r\n\r\n  // ui\r\n  UI_ENABLE: v.boolean(),\r\n  UI_ROUTE: v.string(),\r\n\r\n  // other\r\n  OTHER_NODE_ENV: v.enum(['development', 'production', 'test']),\r\n  OTHER_LISTEN_TO_PROCESS_EXITS: v.boolean(),\r\n  OTHER_NO_LOGO: v.boolean(),\r\n  OTHER_HARD_RESET_PAGE: v.boolean(),\r\n  OTHER_BROWSER_SHELL_MODE: v.boolean(),\r\n\r\n  // debugger\r\n  DEBUG_ENABLE: v.boolean(),\r\n  DEBUG_HEADLESS: v.boolean(),\r\n  DEBUG_DEVTOOLS: v.boolean(),\r\n  DEBUG_LISTEN_TO_CONSOLE: v.boolean(),\r\n  DEBUG_DUMPIO: v.boolean(),\r\n  DEBUG_SLOW_MO: v.nonNegativeNum(),\r\n  DEBUG_DEBUGGING_PORT: v.positiveNum()\r\n});\r\n\r\nexport const envs = Config.partial().parse(process.env);\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { appendFile, existsSync, mkdirSync } from 'fs';\r\n\r\n// The available colors\r\nconst colors = ['red', 'yellow', 'blue', 'gray', 'green'];\r\n\r\n// The default logging config\r\nlet logging = {\r\n  // Flags for logging status\r\n  toConsole: true,\r\n  toFile: false,\r\n  pathCreated: false,\r\n  // Log levels\r\n  levelsDesc: [\r\n    {\r\n      title: 'error',\r\n      color: colors[0]\r\n    },\r\n    {\r\n      title: 'warning',\r\n      color: colors[1]\r\n    },\r\n    {\r\n      title: 'notice',\r\n      color: colors[2]\r\n    },\r\n    {\r\n      title: 'verbose',\r\n      color: colors[3]\r\n    },\r\n    {\r\n      title: 'benchmark',\r\n      color: colors[4]\r\n    }\r\n  ],\r\n  // Log listeners\r\n  listeners: []\r\n};\r\n\r\n/**\r\n * Logs the provided texts to a file, if file logging is enabled. It creates\r\n * the necessary directory structure if not already created and appends the\r\n * content, including an optional prefix, to the specified log file.\r\n *\r\n * @param {string[]} texts - An array of texts to be logged.\r\n * @param {string} prefix - An optional prefix to be added to each log entry.\r\n */\r\nconst logToFile = (texts, prefix) => {\r\n  if (!logging.pathCreated) {\r\n    // Create if does not exist\r\n    !existsSync(logging.dest) && mkdirSync(logging.dest);\r\n\r\n    // We now assume the path is available, e.g. it's the responsibility\r\n    // of the user to create the path with the correct access rights.\r\n    logging.pathCreated = true;\r\n  }\r\n\r\n  // Add the content to a file\r\n  appendFile(\r\n    `${logging.dest}${logging.file}`,\r\n    [prefix].concat(texts).join(' ') + '\\n',\r\n    (error) => {\r\n      if (error) {\r\n        console.log(`[logger] Unable to write to log file: ${error}`);\r\n        logging.toFile = false;\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\n/**\r\n * Logs a message. Accepts a variable amount of arguments. Arguments after\r\n * `level` will be passed directly to console.log, and/or will be joined\r\n * and appended to the log file.\r\n *\r\n * @param {any} args - An array of arguments where the first is the log level\r\n * and the rest are strings to build a message with.\r\n */\r\nexport const log = (...args) => {\r\n  const [newLevel, ...texts] = args;\r\n\r\n  // Current logging options\r\n  const { levelsDesc, level } = logging;\r\n\r\n  // Check if log level is within a correct range or is a benchmark log\r\n  if (\r\n    newLevel !== 5 &&\r\n    (newLevel === 0 || newLevel > level || level > levelsDesc.length)\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  // Get rid of the GMT text information\r\n  const newDate = new Date().toString().split('(')[0].trim();\r\n\r\n  // Create a message's prefix\r\n  const prefix = `${newDate} [${levelsDesc[newLevel - 1].title}] -`;\r\n\r\n  // Call available log listeners\r\n  logging.listeners.forEach((fn) => {\r\n    fn(prefix, texts.join(' '));\r\n  });\r\n\r\n  // Log to console\r\n  if (logging.toConsole) {\r\n    console.log.apply(\r\n      undefined,\r\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat(texts)\r\n    );\r\n  }\r\n\r\n  // Log to file\r\n  if (logging.toFile) {\r\n    logToFile(texts, prefix);\r\n  }\r\n};\r\n\r\n/**\r\n * Logs an error message with its stack trace. Optionally, a custom message\r\n * can be provided.\r\n *\r\n * @param {number} level - The log level.\r\n * @param {Error} error - The error object.\r\n * @param {string} customMessage - An optional custom message to be logged along\r\n * with the error.\r\n */\r\nexport const logWithStack = (newLevel, error, customMessage) => {\r\n  // Get the main message\r\n  const mainMessage = customMessage || error.message;\r\n\r\n  // Current logging options\r\n  const { level, levelsDesc } = logging;\r\n\r\n  // Check if log level is within a correct range\r\n  if (newLevel === 0 || newLevel > level || level > levelsDesc.length) {\r\n    return;\r\n  }\r\n\r\n  // Get rid of the GMT text information\r\n  const newDate = new Date().toString().split('(')[0].trim();\r\n\r\n  // Create a message's prefix\r\n  const prefix = `${newDate} [${levelsDesc[newLevel - 1].title}] -`;\r\n\r\n  // If the customMessage exists, we want to display the whole stack message\r\n  const stackMessage =\r\n    error.message !== error.stackMessage || error.stackMessage === undefined\r\n      ? error.stack\r\n      : error.stack.split('\\n').slice(1).join('\\n');\r\n\r\n  // Combine custom message or error message with error stack message\r\n  const texts = [mainMessage, '\\n', stackMessage];\r\n\r\n  // Log to console\r\n  if (logging.toConsole) {\r\n    console.log.apply(\r\n      undefined,\r\n      [prefix.toString()[logging.levelsDesc[newLevel - 1].color]].concat([\r\n        mainMessage[colors[newLevel - 1]],\r\n        '\\n',\r\n        stackMessage\r\n      ])\r\n    );\r\n  }\r\n\r\n  // Call available log listeners\r\n  logging.listeners.forEach((fn) => {\r\n    fn(prefix, texts.join(' '));\r\n  });\r\n\r\n  // Log to file\r\n  if (logging.toFile) {\r\n    logToFile(texts, prefix);\r\n  }\r\n};\r\n\r\n/**\r\n * Sets the log level to the specified value. Log levels are (0 = no logging,\r\n * 1 = error, 2 = warning, 3 = notice, 4 = verbose or 5 = benchmark)\r\n *\r\n * @param {number} newLevel - The new log level to be set.\r\n */\r\nexport const setLogLevel = (newLevel) => {\r\n  if (newLevel >= 0 && newLevel <= logging.levelsDesc.length) {\r\n    logging.level = newLevel;\r\n  }\r\n};\r\n\r\n/**\r\n * Enables file logging with the specified destination and log file.\r\n *\r\n * @param {string} logDest - The destination path for log files.\r\n * @param {string} logFile - The log file name.\r\n */\r\nexport const enableFileLogging = (logDest, logFile) => {\r\n  // Update logging options\r\n  logging = {\r\n    ...logging,\r\n    dest: logDest || logging.dest,\r\n    file: logFile || logging.file,\r\n    toFile: true\r\n  };\r\n\r\n  if (logging.dest.length === 0) {\r\n    return log(1, '[logger] File logging initialization: no path supplied.');\r\n  }\r\n\r\n  if (!logging.dest.endsWith('/')) {\r\n    logging.dest += '/';\r\n  }\r\n};\r\n\r\n/**\r\n * Initializes logging with the specified logging configuration.\r\n *\r\n * @param {Object} loggingOptions - The logging configuration object.\r\n */\r\nexport const initLogging = (loggingOptions) => {\r\n  // Set all the logging options on our logging module object\r\n  for (const [key, value] of Object.entries(loggingOptions)) {\r\n    logging[key] = value;\r\n  }\r\n\r\n  // Set the log level\r\n  setLogLevel(loggingOptions && parseInt(loggingOptions.level));\r\n\r\n  // Set the log file path and name\r\n  if (loggingOptions && loggingOptions.dest && loggingOptions.toFile) {\r\n    enableFileLogging(\r\n      loggingOptions.dest,\r\n      loggingOptions.file || 'highcharts-export-server.log'\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Adds a listener function to the logging system.\r\n *\r\n * @param {function} fn - The listener function to be added.\r\n */\r\nexport const listen = (fn) => {\r\n  logging.listeners.push(fn);\r\n};\r\n\r\nexport default {\r\n  log,\r\n  logWithStack,\r\n  setLogLevel,\r\n  enableFileLogging,\r\n  initLogging,\r\n  listen\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join } from 'path';\r\nimport { fileURLToPath } from 'url';\r\n\r\nimport { defaultConfig } from '../lib/schemas/config.js';\r\nimport { log, logWithStack } from './logger.js';\r\n\r\nconst MAX_BACKOFF_ATTEMPTS = 6;\r\n\r\nexport const __dirname = fileURLToPath(new URL('../.', import.meta.url));\r\n\r\n/**\r\n * Clears and standardizes text by replacing multiple consecutive whitespace\r\n * characters with a single space and trimming any leading or trailing\r\n * whitespace.\r\n *\r\n * @param {string} text - The input text to be cleared.\r\n * @param {RegExp} [rule=/\\s\\s+/g] - The regular expression rule to match\r\n * multiple consecutive whitespace characters.\r\n * @param {string} [replacer=' '] - The string used to replace multiple\r\n * consecutive whitespace characters.\r\n *\r\n * @returns {string} - The cleared and standardized text.\r\n */\r\nexport const clearText = (text, rule = /\\s\\s+/g, replacer = ' ') =>\r\n  text.replaceAll(rule, replacer).trim();\r\n\r\n/**\r\n * Implements an exponential backoff strategy for retrying a function until\r\n * a certain number of attempts are reached.\r\n *\r\n * @param {Function} fn - The function to be retried.\r\n * @param {number} [attempt=0] - The current attempt number.\r\n * @param {...any} args - Arguments to be passed to the function.\r\n *\r\n * @returns {Promise} - A promise that resolves to the result of the function\r\n * if successful.\r\n *\r\n * @throws {Error} - Throws an error if the maximum number of attempts\r\n * is reached.\r\n */\r\nexport const expBackoff = async (fn, attempt = 0, ...args) => {\r\n  try {\r\n    // Try to call the function\r\n    return await fn(...args);\r\n  } catch (error) {\r\n    // Calculate delay in ms\r\n    const delayInMs = 2 ** attempt * 1000;\r\n\r\n    // If the attempt exceeds the maximum attempts of reapeat, throw an error\r\n    if (++attempt >= MAX_BACKOFF_ATTEMPTS) {\r\n      throw error;\r\n    }\r\n\r\n    // Wait given amount of time\r\n    await new Promise((response) => setTimeout(response, delayInMs));\r\n    log(\r\n      3,\r\n      `[pool] Waited ${delayInMs}ms until next call for the resource id: ${args[0]}.`\r\n    );\r\n\r\n    // Try again\r\n    return expBackoff(fn, attempt, ...args);\r\n  }\r\n};\r\n\r\n/**\r\n * Fixes the export type based on MIME types and file extensions.\r\n *\r\n * @param {string} type - The original export type.\r\n * @param {string} outfile - The file path or name.\r\n *\r\n * @returns {string} - The corrected export type.\r\n */\r\nexport const fixType = (type, outfile) => {\r\n  // MIME types\r\n  const mimeTypes = {\r\n    'image/png': 'png',\r\n    'image/jpeg': 'jpeg',\r\n    'application/pdf': 'pdf',\r\n    'image/svg+xml': 'svg'\r\n  };\r\n\r\n  // Formats\r\n  const formats = ['png', 'jpeg', 'pdf', 'svg'];\r\n\r\n  // Check if type and outfile's extensions are the same\r\n  if (outfile) {\r\n    const outType = outfile.split('.').pop();\r\n\r\n    if (outType === 'jpg') {\r\n      type = 'jpeg';\r\n    } else if (formats.includes(outType) && type !== outType) {\r\n      type = outType;\r\n    }\r\n  }\r\n\r\n  // Return a correct type\r\n  return mimeTypes[type] || formats.find((t) => t === type) || 'png';\r\n};\r\n\r\n/**\r\n * Handles and validates resources for export.\r\n *\r\n * @param {Object|string} resources - The resources to be handled. Can be either\r\n * a JSON object, stringified JSON or a path to a JSON file.\r\n * @param {boolean} allowFileResources - Whether to allow loading resources from\r\n * files.\r\n *\r\n * @returns {Object|undefined} - The handled resources or undefined if no valid\r\n * resources are found.\r\n */\r\nexport const handleResources = (resources = false, allowFileResources) => {\r\n  const allowedProps = ['js', 'css', 'files'];\r\n\r\n  let handledResources = resources;\r\n  let correctResources = false;\r\n\r\n  // Try to load resources from a file\r\n  if (allowFileResources && resources.endsWith('.json')) {\r\n    try {\r\n      handledResources = isCorrectJSON(readFileSync(resources, 'utf8'));\r\n    } catch (error) {\r\n      return logWithStack(2, error, `[cli] No resources found.`);\r\n    }\r\n  } else {\r\n    // Try to get JSON\r\n    handledResources = isCorrectJSON(resources);\r\n\r\n    // Get rid of the files section\r\n    if (handledResources && !allowFileResources) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Filter from unnecessary properties\r\n  for (const propName in handledResources) {\r\n    if (!allowedProps.includes(propName)) {\r\n      delete handledResources[propName];\r\n    } else if (!correctResources) {\r\n      correctResources = true;\r\n    }\r\n  }\r\n\r\n  // Check if at least one of allowed properties is present\r\n  if (!correctResources) {\r\n    return log(3, `[cli] No resources found.`);\r\n  }\r\n\r\n  // Handle files section\r\n  if (handledResources.files) {\r\n    handledResources.files = handledResources.files.map((item) => item.trim());\r\n    if (!handledResources.files || handledResources.files.length <= 0) {\r\n      delete handledResources.files;\r\n    }\r\n  }\r\n\r\n  // Return resources\r\n  return handledResources;\r\n};\r\n\r\n/**\r\n * Validates and parses JSON data. Checks if provided data is or can\r\n * be a correct JSON. If a primitive is provided, it is stringified and returned.\r\n *\r\n * @param {Object|string} data - The JSON data to be validated and parsed.\r\n * @param {boolean} toString - Whether to return a stringified representation\r\n * of the parsed JSON.\r\n *\r\n * @returns {Object|string|boolean} - The parsed JSON object, stringified JSON,\r\n * or false if validation fails.\r\n */\r\nexport function isCorrectJSON(data, toString) {\r\n  try {\r\n    // Get the string representation if not already before parsing\r\n    const parsedData = JSON.parse(\r\n      typeof data !== 'string' ? JSON.stringify(data) : data\r\n    );\r\n\r\n    // Return a stringified representation of a JSON if required\r\n    if (typeof parsedData !== 'string' && toString) {\r\n      return JSON.stringify(parsedData);\r\n    }\r\n\r\n    // Return a JSON\r\n    return parsedData;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if the given item is an object.\r\n *\r\n * @param {any} item - The item to be checked.\r\n *\r\n * @returns {boolean} - True if the item is an object, false otherwise.\r\n */\r\nexport const isObject = (item) =>\r\n  typeof item === 'object' && !Array.isArray(item) && item !== null;\r\n\r\n/**\r\n * Checks if the given object is empty.\r\n *\r\n * @param {Object} item - The object to be checked.\r\n *\r\n * @returns {boolean} - True if the object is empty, false otherwise.\r\n */\r\nexport const isObjectEmpty = (item) =>\r\n  typeof item === 'object' &&\r\n  !Array.isArray(item) &&\r\n  item !== null &&\r\n  Object.keys(item).length === 0;\r\n\r\n/**\r\n * Checks if a private IP range URL is found in the given string.\r\n *\r\n * @param {string} item - The string to be checked for a private IP range URL.\r\n *\r\n * @returns {boolean} - True if a private IP range URL is found, false\r\n * otherwise.\r\n */\r\nexport const isPrivateRangeUrlFound = (item) => {\r\n  const regexPatterns = [\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?localhost\\b/,\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/,\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b/,\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?172\\.(1[6-9]|2[0-9]|3[0-1])\\.\\d{1,3}\\.\\d{1,3}\\b/,\r\n    /xlink:href=\"(?:http:\\/\\/|https:\\/\\/)?192\\.168\\.\\d{1,3}\\.\\d{1,3}\\b/\r\n  ];\r\n\r\n  return regexPatterns.some((pattern) => pattern.test(item));\r\n};\r\n\r\n/**\r\n * Creates a deep copy of the given object or array.\r\n *\r\n * @param {Object|Array} obj - The object or array to be deeply copied.\r\n *\r\n * @returns {Object|Array} - The deep copy of the provided object or array.\r\n */\r\nexport const deepCopy = (obj) => {\r\n  if (obj === null || typeof obj !== 'object') {\r\n    return obj;\r\n  }\r\n\r\n  const copy = Array.isArray(obj) ? [] : {};\r\n\r\n  for (const key in obj) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n      copy[key] = deepCopy(obj[key]);\r\n    }\r\n  }\r\n\r\n  return copy;\r\n};\r\n\r\n/**\r\n * Converts the provided options object to a JSON-formatted string with the\r\n * option to preserve functions.\r\n *\r\n * @param {Object} options - The options object to be converted to a string.\r\n * @param {boolean} allowFunctions - If set to true, functions are preserved\r\n * in the output.\r\n *\r\n * @returns {string} - The JSON-formatted string representing the options.\r\n */\r\nexport const optionsStringify = (options, allowFunctions) => {\r\n  const replacerCallback = (name, value) => {\r\n    if (typeof value === 'string') {\r\n      value = value.trim();\r\n\r\n      // If allowFunctions is set to true, preserve functions\r\n      if (\r\n        (value.startsWith('function(') || value.startsWith('function (')) &&\r\n        value.endsWith('}')\r\n      ) {\r\n        value = allowFunctions\r\n          ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n          : undefined;\r\n      }\r\n    }\r\n\r\n    return typeof value === 'function'\r\n      ? `EXP_FUN${(value + '').replaceAll(/\\n|\\t|\\r/g, ' ')}EXP_FUN`\r\n      : value;\r\n  };\r\n\r\n  // Stringify options and if required, replace special functions marks\r\n  return JSON.stringify(options, replacerCallback).replaceAll(\r\n    /\"EXP_FUN|EXP_FUN\"/g,\r\n    ''\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the Highcharts Export Server logo and version information.\r\n *\r\n * @param {boolean} noLogo - If true, only prints version information without\r\n * the logo.\r\n */\r\nexport const printLogo = (noLogo) => {\r\n  // Get package version either from env or from package.json\r\n  const packageVersion = JSON.parse(\r\n    readFileSync(join(__dirname, 'package.json'))\r\n  ).version;\r\n\r\n  // Print text only\r\n  if (noLogo) {\r\n    console.log(`Starting Highcharts Export Server v${packageVersion}...`);\r\n    return;\r\n  }\r\n\r\n  // Print the logo\r\n  console.log(\r\n    readFileSync(__dirname + '/msg/startup.msg').toString().bold.yellow,\r\n    `v${packageVersion}\\n`.bold\r\n  );\r\n};\r\n\r\n/**\r\n * Prints the usage information for CLI arguments. If required, it can list\r\n * properties recursively\r\n */\r\nexport function printUsage() {\r\n  const pad = 48;\r\n  const readme = 'https://github.com/highcharts/node-export-server#readme';\r\n\r\n  // Display readme information\r\n  console.log(\r\n    '\\nUsage of CLI arguments:'.bold,\r\n    '\\n------',\r\n    `\\nFor more detailed information, visit the readme at: ${readme.bold.yellow}.`\r\n  );\r\n\r\n  const cycleCategories = (options) => {\r\n    for (const [name, option] of Object.entries(options)) {\r\n      // If category has more levels, go further\r\n      if (!Object.prototype.hasOwnProperty.call(option, 'value')) {\r\n        cycleCategories(option);\r\n      } else {\r\n        let descName = `  --${option.cliName || name} ${\r\n          ('<' + option.type + '>').green\r\n        } `;\r\n        if (descName.length < pad) {\r\n          for (let i = descName.length; i < pad; i++) {\r\n            descName += '.';\r\n          }\r\n        }\r\n\r\n        // Display correctly aligned messages\r\n        console.log(\r\n          descName,\r\n          option.description,\r\n          `[Default: ${option.value.toString().bold}]`.blue\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  // Cycle through options of each categories and display the usage info\r\n  Object.keys(defaultConfig).forEach((category) => {\r\n    // Only puppeteer and highcharts categories cannot be configured through CLI\r\n    if (!['puppeteer', 'highcharts'].includes(category)) {\r\n      console.log(`\\n${category.toUpperCase()}`.red);\r\n      cycleCategories(defaultConfig[category]);\r\n    }\r\n  });\r\n  console.log('\\n');\r\n}\r\n\r\n/**\r\n * Rounds a number to the specified precision.\r\n *\r\n * @param {number} value - The number to be rounded.\r\n * @param {number} precision - The number of decimal places to round to.\r\n *\r\n * @returns {number} - The rounded number.\r\n */\r\nexport const roundNumber = (value, precision = 1) => {\r\n  const multiplier = Math.pow(10, precision || 0);\r\n  return Math.round(+value * multiplier) / multiplier;\r\n};\r\n\r\n/**\r\n * Converts a value to a boolean.\r\n *\r\n * @param {any} item - The value to be converted to a boolean.\r\n *\r\n * @returns {boolean} - The boolean representation of the input value.\r\n */\r\nexport const toBoolean = (item) =>\r\n  ['false', 'undefined', 'null', 'NaN', '0', ''].includes(item)\r\n    ? false\r\n    : !!item;\r\n\r\n/**\r\n * Wraps custom code to execute it safely.\r\n *\r\n * @param {string} customCode - The custom code to be wrapped.\r\n * @param {boolean} allowFileResources - Flag to allow loading code from a file.\r\n *\r\n * @returns {string|boolean} - The wrapped custom code or false if wrapping\r\n * fails.\r\n */\r\nexport const wrapAround = (customCode, allowFileResources) => {\r\n  if (customCode && typeof customCode === 'string') {\r\n    customCode = customCode.trim();\r\n\r\n    if (customCode.endsWith('.js')) {\r\n      return allowFileResources\r\n        ? wrapAround(readFileSync(customCode, 'utf8'))\r\n        : false;\r\n    } else if (\r\n      customCode.startsWith('function()') ||\r\n      customCode.startsWith('function ()') ||\r\n      customCode.startsWith('()=>') ||\r\n      customCode.startsWith('() =>')\r\n    ) {\r\n      return `(${customCode})()`;\r\n    }\r\n    return customCode.replace(/;$/, '');\r\n  }\r\n};\r\n\r\n/**\r\n * Utility to measure elapsed time using the Node.js process.hrtime() method.\r\n *\r\n * @returns {function(): number} - A function to calculate the elapsed time\r\n * in milliseconds.\r\n */\r\nexport const measureTime = () => {\r\n  const start = process.hrtime.bigint();\r\n  return () => Number(process.hrtime.bigint() - start) / 1000000;\r\n};\r\n\r\nexport default {\r\n  __dirname,\r\n  clearText,\r\n  expBackoff,\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  isObject,\r\n  isObjectEmpty,\r\n  isPrivateRangeUrlFound,\r\n  optionsStringify,\r\n  printLogo,\r\n  printUsage,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround,\r\n  measureTime\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { existsSync, readFileSync, promises as fsPromises } from 'fs';\r\n\r\nimport prompts from 'prompts';\r\n\r\nimport {\r\n  absoluteProps,\r\n  defaultConfig,\r\n  nestedArgs,\r\n  promptsConfig\r\n} from './schemas/config.js';\r\nimport { envs } from './envs.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { deepCopy, isObject, printUsage, toBoolean } from './utils.js';\r\n\r\nlet generalOptions = {};\r\n\r\n/**\r\n * Retrieves and returns the general options for the export process.\r\n *\r\n * @returns {Object} The general options object.\r\n */\r\nexport const getOptions = () => generalOptions;\r\n\r\n/**\r\n * Initializes and sets the general options for the server instace, keeping\r\n * the principle of the options load priority. It accepts optional userOptions\r\n * and args from the CLI.\r\n *\r\n * @param {Object} userOptions - User-provided options for customization.\r\n * @param {Array} args - Command-line arguments for additional configuration\r\n * (CLI usage).\r\n *\r\n * @returns {Object} The updated general options object.\r\n */\r\nexport const setOptions = (userOptions, args) => {\r\n  // Only for the CLI usage\r\n  if (args?.length) {\r\n    // Get the additional options from the custom JSON file\r\n    generalOptions = loadConfigFile(args);\r\n  }\r\n\r\n  // Update the default config with a correct option values\r\n  updateDefaultConfig(defaultConfig, generalOptions);\r\n\r\n  // Set values for server's options and returns them\r\n  generalOptions = initOptions(defaultConfig);\r\n\r\n  // Apply user options if there are any\r\n  if (userOptions) {\r\n    // Merge user options\r\n    generalOptions = mergeConfigOptions(\r\n      generalOptions,\r\n      userOptions,\r\n      absoluteProps\r\n    );\r\n  }\r\n\r\n  // Only for the CLI usage\r\n  if (args?.length) {\r\n    // Pair provided arguments\r\n    generalOptions = pairArgumentValue(generalOptions, args, defaultConfig);\r\n  }\r\n\r\n  // Return final general options\r\n  return generalOptions;\r\n};\r\n\r\n/**\r\n * Allows manual configuration based on specified prompts and saves\r\n * the configuration to a file.\r\n *\r\n * @param {string} configFileName - The name of the configuration file.\r\n *\r\n * @returns {Promise<boolean>} A Promise that resolves to true once the manual\r\n * configuration is completed and saved.\r\n */\r\nexport const manualConfig = async (configFileName) => {\r\n  // Prepare a config object\r\n  let configFile = {};\r\n\r\n  // Check if provided config file exists\r\n  if (existsSync(configFileName)) {\r\n    configFile = JSON.parse(readFileSync(configFileName, 'utf8'));\r\n  }\r\n\r\n  // Question about a configuration category\r\n  const onSubmit = async (p, categories) => {\r\n    let questionsCounter = 0;\r\n    let allQuestions = [];\r\n\r\n    // Create a corresponding property in the manualConfig object\r\n    for (const section of categories) {\r\n      // Mark each option with a section\r\n      promptsConfig[section] = promptsConfig[section].map((option) => ({\r\n        ...option,\r\n        section\r\n      }));\r\n\r\n      // Collect the questions\r\n      allQuestions = [...allQuestions, ...promptsConfig[section]];\r\n    }\r\n\r\n    await prompts(allQuestions, {\r\n      onSubmit: async (prompt, answer) => {\r\n        // Get the default module scripts\r\n        if (prompt.name === 'moduleScripts') {\r\n          answer = answer.length\r\n            ? answer.map((module) => prompt.choices[module])\r\n            : prompt.choices;\r\n\r\n          configFile[prompt.section][prompt.name] = answer;\r\n        } else {\r\n          configFile[prompt.section] = recursiveProps(\r\n            Object.assign({}, configFile[prompt.section] || {}),\r\n            prompt.name.split('.'),\r\n            prompt.choices ? prompt.choices[answer] : answer\r\n          );\r\n        }\r\n\r\n        if (++questionsCounter === allQuestions.length) {\r\n          try {\r\n            await fsPromises.writeFile(\r\n              configFileName,\r\n              JSON.stringify(configFile, null, 2),\r\n              'utf8'\r\n            );\r\n          } catch (error) {\r\n            logWithStack(\r\n              1,\r\n              error,\r\n              `[config] An error occurred while creating the ${configFileName} file.`\r\n            );\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return true;\r\n  };\r\n\r\n  // Find the categories\r\n  const choices = Object.keys(promptsConfig).map((choice) => ({\r\n    title: `${choice} options`,\r\n    value: choice\r\n  }));\r\n\r\n  // Category prompt\r\n  return prompts(\r\n    {\r\n      type: 'multiselect',\r\n      name: 'category',\r\n      message: 'Which category do you want to configure?',\r\n      hint: 'Space: Select specific, A: Select all, Enter: Confirm.',\r\n      instructions: '',\r\n      choices\r\n    },\r\n    { onSubmit }\r\n  );\r\n};\r\n\r\n/**\r\n * Maps old-structured (PhantomJS) options to a new configuration format\r\n * (Puppeteer).\r\n *\r\n * @param {Object} oldOptions - Old-structured options to be mapped.\r\n *\r\n * @returns {Object} New options structured based on the defined nestedArgs\r\n * mapping.\r\n */\r\nexport const mapToNewConfig = (oldOptions) => {\r\n  const newOptions = {};\r\n  // Cycle through old-structured options\r\n  for (const [key, value] of Object.entries(oldOptions)) {\r\n    const propertiesChain = nestedArgs[key] ? nestedArgs[key].split('.') : [];\r\n\r\n    // Populate object in correct properties levels\r\n    propertiesChain.reduce(\r\n      (obj, prop, index) =>\r\n        (obj[prop] =\r\n          propertiesChain.length - 1 === index ? value : obj[prop] || {}),\r\n      newOptions\r\n    );\r\n  }\r\n  return newOptions;\r\n};\r\n\r\n/**\r\n * Merges two sets of configuration options, considering absolute properties.\r\n *\r\n * @param {Object} options - Original configuration options.\r\n * @param {Object} newOptions - New configuration options to be merged.\r\n * @param {Array} absoluteProps - List of properties that should\r\n * not be recursively merged.\r\n *\r\n * @returns {Object} Merged configuration options.\r\n */\r\nexport const mergeConfigOptions = (options, newOptions, absoluteProps = []) => {\r\n  const mergedOptions = deepCopy(options);\r\n\r\n  for (const [key, value] of Object.entries(newOptions)) {\r\n    mergedOptions[key] =\r\n      isObject(value) &&\r\n      !absoluteProps.includes(key) &&\r\n      mergedOptions[key] !== undefined\r\n        ? mergeConfigOptions(mergedOptions[key], value, absoluteProps)\r\n        : value !== undefined\r\n          ? value\r\n          : mergedOptions[key];\r\n  }\r\n\r\n  return mergedOptions;\r\n};\r\n\r\n/**\r\n * Initializes export settings based on provided exportOptions\r\n * and generalOptions.\r\n *\r\n * @param {Object} exportOptions - Options specific to the export process.\r\n * @param {Object} generalOptions - General configuration options.\r\n *\r\n * @returns {Object} Initialized export settings.\r\n */\r\nexport const initExportSettings = (exportOptions, generalOptions = {}) => {\r\n  let options = {};\r\n\r\n  if (exportOptions.svg) {\r\n    options = deepCopy(generalOptions);\r\n    options.export.type = exportOptions.type || exportOptions.export.type;\r\n    options.export.scale = exportOptions.scale || exportOptions.export.scale;\r\n    options.export.outfile =\r\n      exportOptions.outfile || exportOptions.export.outfile;\r\n    options.payload = {\r\n      svg: exportOptions.svg\r\n    };\r\n  } else {\r\n    options = mergeConfigOptions(\r\n      generalOptions,\r\n      exportOptions,\r\n      // Omit going down recursively with the belows\r\n      absoluteProps\r\n    );\r\n  }\r\n\r\n  options.export.outfile =\r\n    options.export?.outfile || `chart.${options.export?.type || 'png'}`;\r\n  return options;\r\n};\r\n\r\n/**\r\n * Loads additional configuration from a specified file using\r\n * the --loadConfig option.\r\n *\r\n * @param {Array} args - Command-line arguments to check for\r\n * the --loadConfig option.\r\n *\r\n * @returns {Object} Additional configuration loaded from the specified file,\r\n * or an empty object if not found or invalid.\r\n */\r\nfunction loadConfigFile(args) {\r\n  // Check if the --loadConfig option was used\r\n  const configIndex = args.findIndex(\r\n    (arg) => arg.replace(/-/g, '') === 'loadConfig'\r\n  );\r\n\r\n  // Check if the --loadConfig has a value\r\n  if (configIndex > -1 && args[configIndex + 1]) {\r\n    const fileName = args[configIndex + 1];\r\n    try {\r\n      // Check if an additional config file is a correct JSON file\r\n      if (fileName && fileName.endsWith('.json')) {\r\n        // Load an optional custom JSON config file\r\n        return JSON.parse(readFileSync(fileName));\r\n      }\r\n    } catch (error) {\r\n      logWithStack(\r\n        2,\r\n        error,\r\n        `[config] Unable to load the configuration from the ${fileName} file.`\r\n      );\r\n    }\r\n  }\r\n\r\n  // No additional options to return\r\n  return {};\r\n}\r\n\r\n/**\r\n * Updates the default configuration object with values from a custom object\r\n * and environment variables.\r\n *\r\n * @param {Object} configObj - The default configuration object.\r\n * @param {Object} customObj - Custom configuration object to override defaults.\r\n * @param {string} propChain - Property chain for tracking nested properties\r\n * during recursion.\r\n */\r\nfunction updateDefaultConfig(configObj, customObj = {}, propChain = '') {\r\n  Object.keys(configObj).forEach((key) => {\r\n    const entry = configObj[key];\r\n    const customValue = customObj && customObj[key];\r\n\r\n    if (typeof entry.value === 'undefined') {\r\n      updateDefaultConfig(entry, customValue, `${propChain}.${key}`);\r\n    } else {\r\n      // If a value from a custom JSON exists, it take precedence\r\n      if (customValue !== undefined) {\r\n        entry.value = customValue;\r\n      }\r\n\r\n      // If a value from an env variable exists, it take precedence\r\n      if (entry.envLink in envs && envs[entry.envLink] !== undefined) {\r\n        entry.value = envs[entry.envLink];\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Initializes options object based on provided items, setting values from\r\n * nested properties recursively.\r\n *\r\n * @param {Object} items - Configuration items to be used for initializing\r\n * options.\r\n *\r\n * @returns {Object} Initialized options object.\r\n */\r\nfunction initOptions(items) {\r\n  let options = {};\r\n  for (const [name, item] of Object.entries(items)) {\r\n    options[name] = Object.prototype.hasOwnProperty.call(item, 'value')\r\n      ? item.value\r\n      : initOptions(item);\r\n  }\r\n  return options;\r\n}\r\n\r\n/**\r\n * Pairs argument values with corresponding options in the configuration,\r\n * updating the options object.\r\n *\r\n * @param {Object} options - Configuration options object to be updated.\r\n * @param {Array} args - Command-line arguments containing values for specific\r\n * options.\r\n * @param {Object} defaultConfig - Default configuration object for reference.\r\n *\r\n * @returns {Object} Updated options object.\r\n */\r\nfunction pairArgumentValue(options, args, defaultConfig) {\r\n  let showUsage = false;\r\n  for (let i = 0; i < args.length; i++) {\r\n    const option = args[i].replace(/-/g, '');\r\n\r\n    // Find the right place for property's value\r\n    const propertiesChain = nestedArgs[option]\r\n      ? nestedArgs[option].split('.')\r\n      : [];\r\n\r\n    // Get the correct type for CLI args which are passed as strings\r\n    let argumentType;\r\n    propertiesChain.reduce((obj, prop, index) => {\r\n      if (propertiesChain.length - 1 === index) {\r\n        argumentType = obj[prop].type;\r\n      }\r\n      return obj[prop];\r\n    }, defaultConfig);\r\n\r\n    propertiesChain.reduce((obj, prop, index) => {\r\n      if (propertiesChain.length - 1 === index) {\r\n        // Finds an option and set a corresponding value\r\n        if (typeof obj[prop] !== 'undefined') {\r\n          if (args[++i]) {\r\n            if (argumentType === 'boolean') {\r\n              obj[prop] = toBoolean(args[i]);\r\n            } else if (argumentType === 'number') {\r\n              obj[prop] = +args[i];\r\n            } else if (argumentType.indexOf(']') >= 0) {\r\n              obj[prop] = args[i].split(',');\r\n            } else {\r\n              obj[prop] = args[i];\r\n            }\r\n          } else {\r\n            log(\r\n              2,\r\n              `[config] Missing value for the '${option}' argument. Using the default value.`\r\n            );\r\n            showUsage = true;\r\n          }\r\n        }\r\n      }\r\n      return obj[prop];\r\n    }, options);\r\n  }\r\n\r\n  // Display the usage for the reference if needed\r\n  if (showUsage) {\r\n    printUsage(defaultConfig);\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\n/**\r\n * Recursively updates properties in an object based on nested names and assigns\r\n * the final value.\r\n *\r\n * @param {Object} objectToUpdate - The object to be updated.\r\n * @param {Array} nestedNames - Array of nested property names.\r\n * @param {any} value - The final value to be assigned.\r\n *\r\n * @returns {Object} Updated object with assigned values.\r\n */\r\nfunction recursiveProps(objectToUpdate, nestedNames, value) {\r\n  while (nestedNames.length > 1) {\r\n    const propName = nestedNames.shift();\r\n\r\n    // Create a property in object if it doesn't exist\r\n    if (!Object.prototype.hasOwnProperty.call(objectToUpdate, propName)) {\r\n      objectToUpdate[propName] = {};\r\n    }\r\n\r\n    // Call function again if there still names to go\r\n    objectToUpdate[propName] = recursiveProps(\r\n      Object.assign({}, objectToUpdate[propName]),\r\n      nestedNames,\r\n      value\r\n    );\r\n\r\n    return objectToUpdate;\r\n  }\r\n\r\n  // Assign the final value\r\n  objectToUpdate[nestedNames[0]] = value;\r\n  return objectToUpdate;\r\n}\r\n\r\nexport default {\r\n  getOptions,\r\n  setOptions,\r\n  manualConfig,\r\n  mapToNewConfig,\r\n  mergeConfigOptions,\r\n  initExportSettings\r\n};\r\n","/**\r\n * This module exports two functions: fetch (for GET requests) and post (for POST requests).\r\n */\r\n\r\nimport http from 'http';\r\nimport https from 'https';\r\n\r\n/**\r\n * Returns the HTTP or HTTPS protocol module based on the provided URL.\r\n *\r\n * @param {string} url - The URL to determine the protocol.\r\n *\r\n * @returns {Object} The HTTP or HTTPS protocol module (http or https).\r\n */\r\nconst getProtocol = (url) => (url.startsWith('https') ? https : http);\r\n\r\n/**\r\n * Fetches data from the specified URL using either HTTP or HTTPS protocol.\r\n *\r\n * @param {string} url - The URL to fetch data from.\r\n * @param {Object} requestOptions - Options for the HTTP request (optional).\r\n *\r\n * @returns {Promise<Object>} Promise resolving to the HTTP response object\r\n * with added 'text' property or rejecting with an error.\r\n */\r\nasync function fetch(url, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n\r\n    protocol\r\n      .get(\r\n        url,\r\n        Object.assign(\r\n          {\r\n            headers: {\r\n              'User-Agent': 'highcharts/export',\r\n              Referer: 'highcharts/export'\r\n            }\r\n          },\r\n          requestOptions || {}\r\n        ),\r\n        (res) => {\r\n          let data = '';\r\n\r\n          // A chunk of data has been received.\r\n          res.on('data', (chunk) => {\r\n            data += chunk;\r\n          });\r\n\r\n          // The whole response has been received.\r\n          res.on('end', () => {\r\n            if (!data) {\r\n              reject('Nothing was fetched from the URL.');\r\n            }\r\n\r\n            res.text = data;\r\n            resolve(res);\r\n          });\r\n        }\r\n      )\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\n/**\r\n * Sends a POST request to the specified URL with the provided JSON body using\r\n * either HTTP or HTTPS protocol.\r\n *\r\n * @param {string} url - The URL to send the POST request to.\r\n * @param {Object} body - The JSON body to include in the POST request\r\n * (optional, default is an empty object).\r\n * @param {Object} requestOptions - Options for the HTTP request (optional).\r\n *\r\n * @returns {Promise<Object>} Promise resolving to the HTTP response object with\r\n * added 'text' property or rejecting with an error.\r\n */\r\nasync function post(url, body = {}, requestOptions = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const protocol = getProtocol(url);\r\n    const data = JSON.stringify(body);\r\n\r\n    // Set default headers and merge with requestOptions\r\n    const options = Object.assign(\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Content-Length': data.length\r\n        }\r\n      },\r\n      requestOptions\r\n    );\r\n\r\n    const req = protocol\r\n      .request(url, options, (res) => {\r\n        let responseData = '';\r\n\r\n        // A chunk of data has been received.\r\n        res.on('data', (chunk) => {\r\n          responseData += chunk;\r\n        });\r\n\r\n        // The whole response has been received.\r\n        res.on('end', () => {\r\n          try {\r\n            res.text = responseData;\r\n            resolve(res);\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        });\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error);\r\n      });\r\n\r\n    // Write the request body and end the request.\r\n    req.write(data);\r\n    req.end();\r\n  });\r\n}\r\n\r\nexport default fetch;\r\nexport { fetch, post };\r\n","class ExportError extends Error {\r\n  constructor(message) {\r\n    super();\r\n    this.message = message;\r\n    this.stackMessage = message;\r\n  }\r\n\r\n  setError(error) {\r\n    this.error = error;\r\n    if (error.name) {\r\n      this.name = error.name;\r\n    }\r\n    if (error.statusCode) {\r\n      this.statusCode = error.statusCode;\r\n    }\r\n    if (error.stack) {\r\n      this.stackMessage = error.message;\r\n      this.stack = error.stack;\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default ExportError;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n// The cache manager manages the Highcharts library and its dependencies.\r\n// The cache itself is stored in .cache, and is checked by the config system\r\n// before starting the service\r\n\r\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nimport { HttpsProxyAgent } from 'https-proxy-agent';\r\n\r\nimport { getOptions } from './config.js';\r\nimport { envs } from './envs.js';\r\nimport { fetch } from './fetch.js';\r\nimport { log } from './logger.js';\r\nimport { __dirname } from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nconst cache = {\r\n  cdnURL: 'https://code.highcharts.com/',\r\n  activeManifest: {},\r\n  sources: '',\r\n  hcVersion: ''\r\n};\r\n\r\n/**\r\n * Extracts and caches the Highcharts version from the sources string.\r\n *\r\n * @returns {string} The extracted Highcharts version.\r\n */\r\nexport const extractVersion = (cache) => {\r\n  return cache.sources\r\n    .substring(0, cache.sources.indexOf('*/'))\r\n    .replace('/*', '')\r\n    .replace('*/', '')\r\n    .replace(/\\n/g, '')\r\n    .trim();\r\n};\r\n\r\n/**\r\n * Extracts the Highcharts module name based on the scriptPath.\r\n */\r\nexport const extractModuleName = (scriptPath) => {\r\n  return scriptPath.replace(\r\n    /(.*)\\/|(.*)modules\\/|stock\\/(.*)indicators\\/|maps\\/(.*)modules\\//gi,\r\n    ''\r\n  );\r\n};\r\n\r\n/**\r\n * Saves the provided configuration and fetched modules to the cache manifest\r\n * file.\r\n *\r\n * @param {object} config - Highcharts-related configuration object.\r\n * @param {object} fetchedModules - An object that contains mapped names of\r\n * fetched Highcharts modules to use.\r\n *\r\n * @throws {ExportError} Throws an ExportError if an error occurs while writing\r\n * the cache manifest.\r\n */\r\nexport const saveConfigToManifest = async (config, fetchedModules) => {\r\n  const newManifest = {\r\n    version: config.version,\r\n    modules: fetchedModules || {}\r\n  };\r\n\r\n  // Update cache object with the current modules\r\n  cache.activeManifest = newManifest;\r\n\r\n  log(3, '[cache] Writing a new manifest.');\r\n  try {\r\n    writeFileSync(\r\n      join(__dirname, config.cachePath, 'manifest.json'),\r\n      JSON.stringify(newManifest),\r\n      'utf8'\r\n    );\r\n  } catch (error) {\r\n    throw new ExportError('[cache] Error writing the cache manifest.').setError(\r\n      error\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches a single script and updates the fetchedModules accordingly.\r\n *\r\n * @param {string} script - A path to script to get.\r\n * @param {Object} requestOptions - Additional options for the proxy agent\r\n * to use for a request.\r\n * @param {Object} fetchedModules - An object which tracks which Highcharts\r\n * modules have been fetched.\r\n * @param {boolean} shouldThrowError - A flag to indicate if the error should be\r\n * thrown. This should be used only for the core scripts.\r\n *\r\n * @returns {Promise<string>} A Promise resolving to the text representation\r\n * of the fetched script.\r\n *\r\n * @throws {ExportError} Throws an ExportError if there is a problem with\r\n * fetching the script.\r\n */\r\nexport const fetchAndProcessScript = async (\r\n  script,\r\n  requestOptions,\r\n  fetchedModules,\r\n  shouldThrowError = false\r\n) => {\r\n  // Get rid of the .js from the custom strings\r\n  if (script.endsWith('.js')) {\r\n    script = script.substring(0, script.length - 3);\r\n  }\r\n\r\n  log(4, `[cache] Fetching script - ${script}.js`);\r\n\r\n  // Fetch the script\r\n  const response = await fetch(`${script}.js`, requestOptions);\r\n\r\n  // If OK, return its text representation\r\n  if (response.statusCode === 200 && typeof response.text == 'string') {\r\n    if (fetchedModules) {\r\n      const moduleName = extractModuleName(script);\r\n      fetchedModules[moduleName] = 1;\r\n    }\r\n\r\n    return response.text;\r\n  }\r\n\r\n  if (shouldThrowError) {\r\n    throw new ExportError(\r\n      `Could not fetch the ${script}.js. The script might not exist in the requested version (status code: ${response.statusCode}).`\r\n    ).setError(response);\r\n  } else {\r\n    log(\r\n      2,\r\n      `[cache] Could not fetch the ${script}.js. The script might not exist in the requested version.`\r\n    );\r\n  }\r\n\r\n  return '';\r\n};\r\n\r\n/**\r\n * Fetches Highcharts scripts and customScripts from the given CDNs.\r\n *\r\n * @param {string} coreScripts - Array of Highcharts core scripts to fetch.\r\n * @param {string} moduleScripts - Array of Highcharts modules to fetch.\r\n * @param {string} customScripts - Array of custom script paths to fetch\r\n * (full URLs).\r\n * @param {object} proxyOptions - Options for the proxy agent to use for\r\n * a request.\r\n * @param {object} fetchedModules - An object which tracks which Highcharts\r\n * modules have been fetched.\r\n *\r\n * @returns {Promise<string>} The fetched scripts content joined.\r\n */\r\nexport const fetchScripts = async (\r\n  coreScripts,\r\n  moduleScripts,\r\n  customScripts,\r\n  proxyOptions,\r\n  fetchedModules\r\n) => {\r\n  // Configure proxy if exists\r\n  let proxyAgent;\r\n  const proxyHost = proxyOptions.host;\r\n  const proxyPort = proxyOptions.port;\r\n\r\n  // Try to create a Proxy Agent\r\n  if (proxyHost && proxyPort) {\r\n    try {\r\n      proxyAgent = new HttpsProxyAgent({\r\n        host: proxyHost,\r\n        port: proxyPort\r\n      });\r\n    } catch (error) {\r\n      throw new ExportError('[cache] Could not create a Proxy Agent.').setError(\r\n        error\r\n      );\r\n    }\r\n  }\r\n\r\n  // If exists, add proxy agent to request options\r\n  const requestOptions = proxyAgent\r\n    ? {\r\n        agent: proxyAgent,\r\n        timeout: envs.SERVER_PROXY_TIMEOUT\r\n      }\r\n    : {};\r\n\r\n  const allFetchPromises = [\r\n    ...coreScripts.map((script) =>\r\n      fetchAndProcessScript(`${script}`, requestOptions, fetchedModules, true)\r\n    ),\r\n    ...moduleScripts.map((script) =>\r\n      fetchAndProcessScript(`${script}`, requestOptions, fetchedModules)\r\n    ),\r\n    ...customScripts.map((script) =>\r\n      fetchAndProcessScript(`${script}`, requestOptions)\r\n    )\r\n  ];\r\n\r\n  const fetchedScripts = await Promise.all(allFetchPromises);\r\n  return fetchedScripts.join(';\\n');\r\n};\r\n\r\n/**\r\n * Updates the local cache with Highcharts scripts and their versions.\r\n *\r\n * @param {Object} options - Object containing all options.\r\n * @param {string} sourcePath - The path to the source file in the cache.\r\n *\r\n * @returns {Promise<object>} A Promise resolving to an object representing\r\n * the fetched modules.\r\n *\r\n * @throws {ExportError} Throws an ExportError if there is an issue updating\r\n * the local Highcharts cache.\r\n */\r\nexport const updateCache = async (\r\n  highchartsOptions,\r\n  proxyOptions,\r\n  sourcePath\r\n) => {\r\n  const version = highchartsOptions.version;\r\n  const hcVersion = version === 'latest' || !version ? '' : `${version}/`;\r\n  const cdnURL = highchartsOptions.cdnURL || cache.cdnURL;\r\n\r\n  log(\r\n    3,\r\n    `[cache] Updating cache version to Highcharts: ${hcVersion || 'latest'}.`\r\n  );\r\n\r\n  const fetchedModules = {};\r\n  try {\r\n    cache.sources = await fetchScripts(\r\n      [\r\n        ...highchartsOptions.coreScripts.map((c) => `${cdnURL}${hcVersion}${c}`)\r\n      ],\r\n      [\r\n        ...highchartsOptions.moduleScripts.map((m) =>\r\n          m === 'map'\r\n            ? `${cdnURL}maps/${hcVersion}modules/${m}`\r\n            : `${cdnURL}${hcVersion}modules/${m}`\r\n        ),\r\n        ...highchartsOptions.indicatorScripts.map(\r\n          (i) => `${cdnURL}stock/${hcVersion}indicators/${i}`\r\n        )\r\n      ],\r\n      highchartsOptions.customScripts,\r\n      proxyOptions,\r\n      fetchedModules\r\n    );\r\n\r\n    cache.hcVersion = extractVersion(cache);\r\n\r\n    // Save the fetched modules into caches' source JSON\r\n    writeFileSync(sourcePath, cache.sources);\r\n    return fetchedModules;\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[cache] Unable to update the local Highcharts cache.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the Highcharts version in the applied configuration and checks\r\n * the cache for the new version.\r\n *\r\n * @param {string} newVersion - The new Highcharts version to be applied.\r\n *\r\n * @returns {Promise<(object|boolean)>} A Promise resolving to the updated\r\n * configuration with the new version, or false if no applied configuration\r\n * exists.\r\n */\r\nexport const updateVersion = async (newVersion) => {\r\n  const options = getOptions();\r\n  if (options?.highcharts) {\r\n    options.highcharts.version = newVersion;\r\n  }\r\n  await checkAndUpdateCache(options);\r\n};\r\n\r\n/**\r\n * Checks the cache for Highcharts dependencies, updates the cache if needed,\r\n * and loads the sources.\r\n *\r\n * @param {Object} options - Object containing all options.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the cache is checked\r\n * and updated.\r\n *\r\n * @throws {ExportError} Throws an ExportError if there is an issue updating\r\n * or reading the cache.\r\n */\r\nexport const checkAndUpdateCache = async (options) => {\r\n  const { highcharts, server } = options;\r\n  const cachePath = join(__dirname, highcharts.cachePath);\r\n\r\n  let fetchedModules;\r\n  // Prepare paths to manifest and sources from the .cache folder\r\n  const manifestPath = join(cachePath, 'manifest.json');\r\n  const sourcePath = join(cachePath, 'sources.js');\r\n\r\n  // Create the cache destination if it doesn't exist already\r\n  !existsSync(cachePath) && mkdirSync(cachePath);\r\n\r\n  // Fetch all the scripts either if manifest.json does not exist\r\n  // or if the forceFetch option is enabled\r\n  if (!existsSync(manifestPath) || highcharts.forceFetch) {\r\n    log(3, '[cache] Fetching and caching Highcharts dependencies.');\r\n    fetchedModules = await updateCache(highcharts, server.proxy, sourcePath);\r\n  } else {\r\n    let requestUpdate = false;\r\n\r\n    // Read the manifest JSON\r\n    const manifest = JSON.parse(readFileSync(manifestPath));\r\n\r\n    // Check if the modules is an array, if so, we rewrite it to a map to make\r\n    // it easier to resolve modules.\r\n    if (manifest.modules && Array.isArray(manifest.modules)) {\r\n      const moduleMap = {};\r\n      manifest.modules.forEach((m) => (moduleMap[m] = 1));\r\n      manifest.modules = moduleMap;\r\n    }\r\n\r\n    const { coreScripts, moduleScripts, indicatorScripts } = highcharts;\r\n    const numberOfModules =\r\n      coreScripts.length + moduleScripts.length + indicatorScripts.length;\r\n\r\n    // Compare the loaded highcharts config with the contents in cache.\r\n    // If there are changes, fetch requested modules and products,\r\n    // and bake them into a giant blob. Save the blob.\r\n    if (manifest.version !== highcharts.version) {\r\n      log(\r\n        2,\r\n        '[cache] A Highcharts version mismatch in the cache, need to re-fetch.'\r\n      );\r\n      requestUpdate = true;\r\n    } else if (Object.keys(manifest.modules || {}).length !== numberOfModules) {\r\n      log(\r\n        2,\r\n        '[cache] The cache and the requested modules do not match, need to re-fetch.'\r\n      );\r\n      requestUpdate = true;\r\n    } else {\r\n      // Check each module, if anything is missing refetch everything\r\n      requestUpdate = (moduleScripts || []).some((moduleName) => {\r\n        if (!manifest.modules[moduleName]) {\r\n          log(\r\n            2,\r\n            `[cache] The ${moduleName} is missing in the cache, need to re-fetch.`\r\n          );\r\n          return true;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (requestUpdate) {\r\n      fetchedModules = await updateCache(highcharts, server.proxy, sourcePath);\r\n    } else {\r\n      log(3, '[cache] Dependency cache is up to date, proceeding.');\r\n\r\n      // Load the sources\r\n      cache.sources = readFileSync(sourcePath, 'utf8');\r\n\r\n      // Get current modules map\r\n      fetchedModules = manifest.modules;\r\n\r\n      cache.hcVersion = extractVersion(cache);\r\n    }\r\n  }\r\n\r\n  // Finally, save the new manifest, which is basically our current config\r\n  // in a slightly different format\r\n  await saveConfigToManifest(highcharts, fetchedModules);\r\n};\r\n\r\nexport const getCachePath = () =>\r\n  join(__dirname, getOptions().highcharts.cachePath);\r\n\r\nexport const getCache = () => cache;\r\n\r\nexport const highcharts = () => cache.sources;\r\n\r\nexport const version = () => cache.hcVersion;\r\n\r\nexport default {\r\n  checkAndUpdateCache,\r\n  getCachePath,\r\n  updateVersion,\r\n  getCache,\r\n  highcharts,\r\n  version\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/* eslint-disable no-undef */\r\n\r\n/**\r\n * Setting the animObject. Called when initing the page.\r\n */\r\nexport function setupHighcharts() {\r\n  Highcharts.animObject = function () {\r\n    return { duration: 0 };\r\n  };\r\n}\r\n\r\n/**\r\n * Creates the actual chart.\r\n *\r\n * @param {object} chartOptions - The options for the Highcharts chart.\r\n * @param {object} options - The export options.\r\n * @param {boolean} displayErrors - A flag indicating whether to display errors.\r\n */\r\nexport async function triggerExport(chartOptions, options, displayErrors) {\r\n  // Display errors flag taken from chart options nad debugger module\r\n  window._displayErrors = displayErrors;\r\n\r\n  // Get required functions\r\n  const { getOptions, merge, setOptions, wrap } = Highcharts;\r\n\r\n  // Create a separate object for a potential setOptions usages in order to\r\n  // prevent from polluting other exports that can happen on the same page\r\n  Highcharts.setOptionsObj = merge(false, {}, getOptions());\r\n\r\n  // By default animation is disabled\r\n  const chart = {\r\n    animation: false\r\n  };\r\n\r\n  // When straight inject, the size is set through CSS only\r\n  if (options.export.strInj) {\r\n    chart.height = chartOptions.chart.height;\r\n    chart.width = chartOptions.chart.width;\r\n  }\r\n\r\n  // NOTE: Is this used for anything useful?\r\n  window.isRenderComplete = false;\r\n  wrap(Highcharts.Chart.prototype, 'init', function (proceed, userOptions, cb) {\r\n    // Override userOptions with image friendly options\r\n    userOptions = merge(userOptions, {\r\n      exporting: {\r\n        enabled: false\r\n      },\r\n      plotOptions: {\r\n        series: {\r\n          label: {\r\n            enabled: false\r\n          }\r\n        }\r\n      },\r\n      /* Expects tooltip in userOptions when forExport is true.\r\n        https://github.com/highcharts/highcharts/blob/3ad430a353b8056b9e764aa4e5cd6828aa479db2/js/parts/Chart.js#L241\r\n        */\r\n      tooltip: {}\r\n    });\r\n\r\n    (userOptions.series || []).forEach(function (series) {\r\n      series.animation = false;\r\n    });\r\n\r\n    // Add flag to know if chart render has been called.\r\n    if (!window.onHighchartsRender) {\r\n      window.onHighchartsRender = Highcharts.addEvent(this, 'render', () => {\r\n        window.isRenderComplete = true;\r\n      });\r\n    }\r\n\r\n    proceed.apply(this, [userOptions, cb]);\r\n  });\r\n\r\n  wrap(Highcharts.Series.prototype, 'init', function (proceed, chart, options) {\r\n    proceed.apply(this, [chart, options]);\r\n  });\r\n\r\n  // Get the user options\r\n  const userOptions = options.export.strInj\r\n    ? new Function(`return ${options.export.strInj}`)()\r\n    : chartOptions;\r\n\r\n  // Trigger custom code\r\n  if (options.customLogic.customCode) {\r\n    new Function('options', options.customLogic.customCode)(userOptions);\r\n  }\r\n\r\n  // Merge the globalOptions, themeOptions, options from the wrapped\r\n  // setOptions function and user options to create the final options object\r\n  const finalOptions = merge(\r\n    false,\r\n    JSON.parse(options.export.themeOptions),\r\n    userOptions,\r\n    // Placed it here instead in the init because of the size issues\r\n    { chart }\r\n  );\r\n\r\n  const finalCallback = options.customLogic.callback\r\n    ? new Function(`return ${options.customLogic.callback}`)()\r\n    : undefined;\r\n\r\n  // Set the global options if exist\r\n  const globalOptions = JSON.parse(options.export.globalOptions);\r\n  if (globalOptions) {\r\n    setOptions(globalOptions);\r\n  }\r\n\r\n  let constr = options.export.constr || 'chart';\r\n  constr = typeof Highcharts[constr] !== 'undefined' ? constr : 'chart';\r\n\r\n  Highcharts[constr]('container', finalOptions, finalCallback);\r\n\r\n  // Get the current global options\r\n  const defaultOptions = getOptions();\r\n\r\n  // Clear it just in case (e.g. the setOptions was used in the customCode)\r\n  for (const prop in defaultOptions) {\r\n    if (typeof defaultOptions[prop] !== 'function') {\r\n      delete defaultOptions[prop];\r\n    }\r\n  }\r\n\r\n  // Set the default options back\r\n  setOptions(Highcharts.setOptionsObj);\r\n\r\n  // Empty the custom global options object\r\n  Highcharts.setOptionsObj = {};\r\n}\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport path from 'path';\r\n\r\nimport puppeteer from 'puppeteer';\r\n\r\nimport { getCachePath } from './cache.js';\r\nimport { getOptions } from './config.js';\r\nimport { setupHighcharts } from './highcharts.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { __dirname } from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\n// Get the template for the page\r\nconst template = readFileSync(__dirname + '/templates/template.html', 'utf8');\r\n\r\nlet browser;\r\n\r\n/**\r\n * Retrieves the existing Puppeteer browser instance.\r\n *\r\n * @returns {Promise<object>} A Promise resolving to the Puppeteer browser\r\n * instance.\r\n *\r\n * @throws {ExportError} Throws an ExportError if no valid browser has been\r\n * created.\r\n */\r\nexport function get() {\r\n  if (!browser) {\r\n    throw new ExportError('[browser] No valid browser has been created.');\r\n  }\r\n  return browser;\r\n}\r\n\r\n/**\r\n * Creates a Puppeteer browser instance with the specified arguments.\r\n *\r\n * @param {Array} puppeteerArgs - Additional arguments for Puppeteer launch.\r\n *\r\n * @returns {Promise<object>} A Promise resolving to the Puppeteer browser\r\n * instance.\r\n *\r\n * @throws {ExportError} Throws an ExportError if max retries to open a browser\r\n * instance are reached, or if no browser instance is found after retries.\r\n */\r\nexport async function create(puppeteerArgs) {\r\n  // Get debug and other options\r\n  const { debug, other } = getOptions();\r\n\r\n  // Get the debug options\r\n  const { enable: enabledDebug, ...debugOptions } = debug;\r\n\r\n  const launchOptions = {\r\n    headless: other.browserShellMode ? 'shell' : true,\r\n    userDataDir: './tmp/',\r\n    args: puppeteerArgs,\r\n    handleSIGINT: false,\r\n    handleSIGTERM: false,\r\n    handleSIGHUP: false,\r\n    waitForInitialPage: false,\r\n    defaultViewport: null,\r\n    ...(enabledDebug && debugOptions)\r\n  };\r\n\r\n  // Create a browser\r\n  if (!browser) {\r\n    let tryCount = 0;\r\n\r\n    const open = async () => {\r\n      try {\r\n        log(\r\n          3,\r\n          `[browser] Attempting to get a browser instance (try ${++tryCount}).`\r\n        );\r\n        browser = await puppeteer.launch(launchOptions);\r\n      } catch (error) {\r\n        logWithStack(\r\n          1,\r\n          error,\r\n          '[browser] Failed to launch a browser instance.'\r\n        );\r\n\r\n        // Retry to launch browser until reaching max attempts\r\n        if (tryCount < 25) {\r\n          log(3, `[browser] Retry to open a browser (${tryCount} out of 25).`);\r\n          await new Promise((response) => setTimeout(response, 4000));\r\n          await open();\r\n        } else {\r\n          throw error;\r\n        }\r\n      }\r\n    };\r\n\r\n    try {\r\n      await open();\r\n\r\n      // Shell mode inform\r\n      if (launchOptions.headless === 'shell') {\r\n        log(3, `[browser] Launched browser in shell mode.`);\r\n      }\r\n\r\n      // Debug mode inform\r\n      if (enabledDebug) {\r\n        log(3, `[browser] Launched browser in debug mode.`);\r\n      }\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        '[browser] Maximum retries to open a browser instance reached.'\r\n      ).setError(error);\r\n    }\r\n\r\n    if (!browser) {\r\n      throw new ExportError('[browser] Cannot find a browser to open.');\r\n    }\r\n  }\r\n\r\n  // Return a browser promise\r\n  return browser;\r\n}\r\n\r\n/**\r\n * Closes the Puppeteer browser instance if it is connected.\r\n *\r\n * @returns {Promise<boolean>} A Promise resolving to true after the browser\r\n * is closed.\r\n */\r\nexport async function close() {\r\n  // Close the browser when connnected\r\n  if (browser?.connected) {\r\n    await browser.close();\r\n  }\r\n  log(4, '[browser] Closed the browser.');\r\n}\r\n\r\n/**\r\n * Creates a new Puppeteer Page within an existing browser instance.\r\n *\r\n * If the browser instance is not available, returns false.\r\n *\r\n * The function creates a new page, disables caching, sets content using\r\n * setPageContent(), and returns the created Puppeteer Page.\r\n *\r\n * @returns {(boolean|object)} Returns false if the browser instance is not\r\n * available, or a Puppeteer Page object representing the newly created page.\r\n */\r\nexport async function newPage() {\r\n  if (!browser) {\r\n    return false;\r\n  }\r\n\r\n  // Create a page\r\n  const page = await browser.newPage();\r\n\r\n  // Disable cache\r\n  await page.setCacheEnabled(false);\r\n\r\n  // Set the content\r\n  await setPageContent(page);\r\n\r\n  // Set page events\r\n  setPageEvents(page);\r\n\r\n  return page;\r\n}\r\n\r\n/**\r\n * Clears the content of a Puppeteer Page based on the specified mode.\r\n *\r\n * @param {Object} page - The Puppeteer Page object to be cleared.\r\n * @param {boolean} hardReset - A flag indicating the type of clearing\r\n * to be performed. If true, navigates to 'about:blank' and resets content\r\n * and scripts. If false, clears the body content by setting a predefined HTML\r\n * structure.\r\n *\r\n * @throws {Error} Logs thrown error if clearing the page content fails.\r\n */\r\nexport async function clearPage(page, hardReset = false) {\r\n  try {\r\n    if (page && !page.isClosed()) {\r\n      if (hardReset) {\r\n        // Navigate to about:blank\r\n        await page.goto('about:blank', { waitUntil: 'domcontentloaded' });\r\n\r\n        // Set the content and and scripts again\r\n        await setPageContent(page);\r\n      } else {\r\n        // Clear body content\r\n        await page.evaluate(() => {\r\n          document.body.innerHTML =\r\n            '<div id=\"chart-container\"><div id=\"container\"></div></div>';\r\n        });\r\n      }\r\n      return true;\r\n    }\r\n  } catch (error) {\r\n    logWithStack(\r\n      2,\r\n      error,\r\n      '[browser] Could not clear the content of the page.'\r\n    );\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Adds custom JS and CSS resources to a Puppeteer Page based on the specified\r\n * options.\r\n *\r\n * @param {Object} page - The Puppeteer Page object to which resources will be\r\n * added.\r\n * @param {Object} options - All options and configuration.\r\n *\r\n * @returns {Promise<Array<Object>>} - Promise resolving to an array of injected\r\n * resources.\r\n */\r\nexport async function addPageResources(page, options) {\r\n  // Injected resources array\r\n  const injectedResources = [];\r\n\r\n  // Use resources\r\n  const resources = options.customLogic.resources;\r\n  if (resources) {\r\n    const injectedJs = [];\r\n\r\n    // Load custom JS code\r\n    if (resources.js) {\r\n      injectedJs.push({\r\n        content: resources.js\r\n      });\r\n    }\r\n\r\n    // Load scripts from all custom files\r\n    if (resources.files) {\r\n      for (const file of resources.files) {\r\n        const isLocal = !file.startsWith('http') ? true : false;\r\n\r\n        // Add each custom script from resources' files\r\n        injectedJs.push(\r\n          isLocal\r\n            ? {\r\n                content: readFileSync(file, 'utf8')\r\n              }\r\n            : {\r\n                url: file\r\n              }\r\n        );\r\n      }\r\n    }\r\n\r\n    for (const jsResource of injectedJs) {\r\n      try {\r\n        injectedResources.push(await page.addScriptTag(jsResource));\r\n      } catch (error) {\r\n        logWithStack(2, error, `[export] The JS resource cannot be loaded.`);\r\n      }\r\n    }\r\n    injectedJs.length = 0;\r\n\r\n    // Load CSS\r\n    const injectedCss = [];\r\n    if (resources.css) {\r\n      let cssImports = resources.css.match(/@import\\s*([^;]*);/g);\r\n      if (cssImports) {\r\n        // Handle css section\r\n        for (let cssImportPath of cssImports) {\r\n          if (cssImportPath) {\r\n            cssImportPath = cssImportPath\r\n              .replace('url(', '')\r\n              .replace('@import', '')\r\n              .replace(/\"/g, '')\r\n              .replace(/'/g, '')\r\n              .replace(/;/, '')\r\n              .replace(/\\)/g, '')\r\n              .trim();\r\n\r\n            // Add each custom css from resources\r\n            if (cssImportPath.startsWith('http')) {\r\n              injectedCss.push({\r\n                url: cssImportPath\r\n              });\r\n            } else if (options.customLogic.allowFileResources) {\r\n              injectedCss.push({\r\n                path: path.join(__dirname, cssImportPath)\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // The rest of the CSS section will be content by now\r\n      injectedCss.push({\r\n        content: resources.css.replace(/@import\\s*([^;]*);/g, '') || ' '\r\n      });\r\n\r\n      for (const cssResource of injectedCss) {\r\n        try {\r\n          injectedResources.push(await page.addStyleTag(cssResource));\r\n        } catch (error) {\r\n          logWithStack(2, error, `[export] The CSS resource cannot be loaded.`);\r\n        }\r\n      }\r\n      injectedCss.length = 0;\r\n    }\r\n  }\r\n  return injectedResources;\r\n}\r\n\r\n/**\r\n * Clears out all state set on the page with addScriptTag/addStyleTag. Removes\r\n * injected resources and resets CSS and script tags on the page. Additionally,\r\n * it destroys previously existing charts.\r\n *\r\n * @param {Object} page - The Puppeteer Page object from which resources will\r\n * be cleared.\r\n * @param {Array<Object>} injectedResources - Array of injected resources\r\n * to be cleared.\r\n */\r\nexport async function clearPageResources(page, injectedResources) {\r\n  for (const resource of injectedResources) {\r\n    await resource.dispose();\r\n  }\r\n\r\n  // Destroy old charts after export is done and reset all CSS and script tags\r\n  await page.evaluate(() => {\r\n    // We are not guaranteed that Highcharts is loaded, e,g, when doing SVG\r\n    // exports\r\n    if (typeof Highcharts !== 'undefined') {\r\n      // eslint-disable-next-line no-undef\r\n      const oldCharts = Highcharts.charts;\r\n\r\n      // Check in any already existing charts\r\n      if (Array.isArray(oldCharts) && oldCharts.length) {\r\n        // Destroy old charts\r\n        for (const oldChart of oldCharts) {\r\n          oldChart && oldChart.destroy();\r\n          // eslint-disable-next-line no-undef\r\n          Highcharts.charts.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    // eslint-disable-next-line no-undef\r\n    const [...scriptsToRemove] = document.getElementsByTagName('script');\r\n    // eslint-disable-next-line no-undef\r\n    const [, ...stylesToRemove] = document.getElementsByTagName('style');\r\n    // eslint-disable-next-line no-undef\r\n    const [...linksToRemove] = document.getElementsByTagName('link');\r\n\r\n    // Remove tags\r\n    for (const element of [\r\n      ...scriptsToRemove,\r\n      ...stylesToRemove,\r\n      ...linksToRemove\r\n    ]) {\r\n      element.remove();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Sets the content for a Puppeteer Page using a predefined template\r\n * and additional scripts. Also, sets the pageerror in order to catch\r\n * and display errors from the window context.\r\n *\r\n * @param {Object} page - The Puppeteer Page object for which the content\r\n * is being set.\r\n */\r\nasync function setPageContent(page) {\r\n  await page.setContent(template, { waitUntil: 'domcontentloaded' });\r\n\r\n  // Add all registered Higcharts scripts, quite demanding\r\n  await page.addScriptTag({ path: `${getCachePath()}/sources.js` });\r\n\r\n  // Set the initial animObject\r\n  await page.evaluate(setupHighcharts);\r\n}\r\n\r\n/**\r\n * Set events for a Puppeteer Page.\r\n *\r\n * @param {Object} page - The Puppeteer Page object to set events to.\r\n */\r\nfunction setPageEvents(page) {\r\n  // Get debug options\r\n  const { debug } = getOptions();\r\n\r\n  // Set the console listener, if needed\r\n  if (debug.enable && debug.listenToConsole) {\r\n    page.on('console', (message) => {\r\n      console.log(`[debug] ${message.text()}`);\r\n    });\r\n  }\r\n\r\n  // Set the pageerror listener\r\n  page.on('pageerror', async (error) => {\r\n    // It would seem like this may fire at the same time or shortly before\r\n    // a page is closed.\r\n    if (page.isClosed()) {\r\n      return;\r\n    }\r\n\r\n    // TODO: Consider adding a switch here that turns on log(0) logging\r\n    // on page errors.\r\n    await page.$eval(\r\n      '#container',\r\n      (element, errorMessage) => {\r\n        // eslint-disable-next-line no-undef\r\n        if (window._displayErrors) {\r\n          element.innerHTML = errorMessage;\r\n        }\r\n      },\r\n      `<h1>Chart input data error: </h1>${error.toString()}`\r\n    );\r\n  });\r\n}\r\n\r\nexport default {\r\n  get,\r\n  create,\r\n  close,\r\n  newPage,\r\n  clearPage,\r\n  addPageResources,\r\n  clearPageResources\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { addPageResources, clearPageResources } from './browser.js';\r\nimport { getCache } from './cache.js';\r\nimport { triggerExport } from './highcharts.js';\r\nimport { log } from './logger.js';\r\n\r\nimport svgTemplate from './../templates/svg_export/svg_export.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\n/**\r\n * Retrieves the clipping region coordinates of the specified page element with\r\n * the id 'chart-container'.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n *\r\n * @returns {Promise<Object>} Promise resolving to an object containing\r\n * x, y, width, and height properties.\r\n */\r\nconst getClipRegion = (page) =>\r\n  page.$eval('#chart-container', (element) => {\r\n    const { x, y, width, height } = element.getBoundingClientRect();\r\n    return {\r\n      x,\r\n      y,\r\n      width,\r\n      height: Math.trunc(height > 1 ? height : 500)\r\n    };\r\n  });\r\n\r\n/**\r\n * Creates an image using Puppeteer's page screenshot functionality with\r\n * specified options.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {string} type - Image type.\r\n * @param {string} encoding - Image encoding.\r\n * @param {Object} clip - Clipping region coordinates.\r\n * @param {number} rasterizationTimeout - Timeout for rasterization\r\n * in milliseconds.\r\n *\r\n * @returns {Promise<Buffer>} Promise resolving to the image buffer or rejecting\r\n * with an ExportError for timeout.\r\n */\r\nconst createImage = (page, type, encoding, clip, rasterizationTimeout) =>\r\n  Promise.race([\r\n    page.screenshot({\r\n      type,\r\n      encoding,\r\n      clip,\r\n      captureBeyondViewport: true,\r\n      fullPage: false,\r\n      optimizeForSpeed: true,\r\n      ...(type !== 'png' ? { quality: 80 } : {}),\r\n\r\n      // #447, #463 - always render on a transparent page if the expected type\r\n      // format is PNG\r\n      omitBackground: type == 'png'\r\n    }),\r\n    new Promise((_resolve, reject) =>\r\n      setTimeout(\r\n        () => reject(new ExportError('Rasterization timeout')),\r\n        rasterizationTimeout || 1500\r\n      )\r\n    )\r\n  ]);\r\n\r\n/**\r\n * Creates a PDF using Puppeteer's page pdf functionality with specified\r\n * options.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {number} height - PDF height.\r\n * @param {number} width - PDF width.\r\n * @param {string} encoding - PDF encoding.\r\n *\r\n * @returns {Promise<Buffer>} Promise resolving to the PDF buffer.\r\n */\r\nconst createPDF = async (\r\n  page,\r\n  height,\r\n  width,\r\n  encoding,\r\n  rasterizationTimeout\r\n) => {\r\n  await page.emulateMediaType('screen');\r\n\r\n  return page.pdf({\r\n    // This will remove an extra empty page in PDF exports\r\n    height: height + 1,\r\n    width,\r\n    encoding,\r\n    timeout: rasterizationTimeout || 1500\r\n  });\r\n};\r\n\r\n/**\r\n * Creates an SVG string by evaluating the outerHTML of the first 'svg' element\r\n * inside an element with the id 'container'.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n *\r\n * @returns {Promise<string>} Promise resolving to the SVG string.\r\n */\r\nconst createSVG = (page) =>\r\n  page.$eval('#container svg:first-of-type', (element) => element.outerHTML);\r\n\r\n/**\r\n * Sets the specified chart and options as configuration into the triggerExport\r\n * function within the window context using page.evaluate.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {any} chart - The chart object to be configured.\r\n * @param {Object} options - Configuration options for the chart.\r\n *\r\n * @returns {Promise<void>} Promise resolving after the configuration is set.\r\n */\r\nconst setAsConfig = async (page, chart, options, displayErrors) =>\r\n  page.evaluate(triggerExport, chart, options, displayErrors);\r\n\r\n/**\r\n * Exports to a chart from a page using Puppeteer.\r\n *\r\n * @param {Object} page - Puppeteer page object.\r\n * @param {any} chart - The chart object or SVG configuration to be exported.\r\n * @param {Object} options - Export options and configuration.\r\n *\r\n * @returns {Promise<string | Buffer | ExportError>} Promise resolving to\r\n * the exported data or rejecting with an ExportError.\r\n */\r\nexport default async (page, chart, options) => {\r\n  // Injected resources array (additional JS and CSS)\r\n  let injectedResources = [];\r\n\r\n  try {\r\n    log(4, '[export] Determining export path.');\r\n\r\n    const exportOptions = options.export;\r\n\r\n    // Decide whether display error or debbuger wrapper around it\r\n    const displayErrors =\r\n      exportOptions?.options?.chart?.displayErrors &&\r\n      getCache().activeManifest.modules.debugger;\r\n\r\n    let isSVG;\r\n    if (\r\n      chart.indexOf &&\r\n      (chart.indexOf('<svg') >= 0 || chart.indexOf('<?xml') >= 0)\r\n    ) {\r\n      // SVG input handling\r\n      log(4, '[export] Treating as SVG.');\r\n\r\n      // If input is also SVG, just return it\r\n      if (exportOptions.type === 'svg') {\r\n        return chart;\r\n      }\r\n\r\n      isSVG = true;\r\n      await page.setContent(svgTemplate(chart), {\r\n        waitUntil: 'domcontentloaded'\r\n      });\r\n    } else {\r\n      // JSON config handling\r\n      log(4, '[export] Treating as config.');\r\n\r\n      // Need to perform straight inject\r\n      if (exportOptions.strInj) {\r\n        // Injection based configuration export\r\n        await setAsConfig(\r\n          page,\r\n          {\r\n            chart: {\r\n              height: exportOptions.height,\r\n              width: exportOptions.width\r\n            }\r\n          },\r\n          options,\r\n          displayErrors\r\n        );\r\n      } else {\r\n        // Basic configuration export\r\n        chart.chart.height = exportOptions.height;\r\n        chart.chart.width = exportOptions.width;\r\n\r\n        await setAsConfig(page, chart, options, displayErrors);\r\n      }\r\n    }\r\n\r\n    // Keeps track of all resources added on the page with addXXXTag. etc\r\n    // It's VITAL that all added resources ends up here so we can clear things\r\n    // out when doing a new export in the same page!\r\n    injectedResources = await addPageResources(page, options);\r\n\r\n    // Get the real chart size and set the zoom accordingly\r\n    const size = isSVG\r\n      ? await page.evaluate((scale) => {\r\n          const svgElement = document.querySelector(\r\n            '#chart-container svg:first-of-type'\r\n          );\r\n\r\n          // Get the values correctly scaled\r\n          const chartHeight = svgElement.height.baseVal.value * scale;\r\n          const chartWidth = svgElement.width.baseVal.value * scale;\r\n\r\n          // In case of SVG the zoom must be set directly for body\r\n          // Set the zoom as scale\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = scale;\r\n\r\n          // Set the margin to 0px\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.margin = '0px';\r\n\r\n          return {\r\n            chartHeight,\r\n            chartWidth\r\n          };\r\n        }, parseFloat(exportOptions.scale))\r\n      : await page.evaluate(() => {\r\n          // eslint-disable-next-line no-undef\r\n          const { chartHeight, chartWidth } = window.Highcharts.charts[0];\r\n\r\n          // No need for such scale manipulation in case of other types of exports\r\n          // Reset the zoom for other exports than to SVGs\r\n          // eslint-disable-next-line no-undef\r\n          document.body.style.zoom = 1;\r\n\r\n          return {\r\n            chartHeight,\r\n            chartWidth\r\n          };\r\n        });\r\n\r\n    // Set final height and width for viewport\r\n    const viewportHeight = Math.abs(\r\n      Math.ceil(size.chartHeight || exportOptions.height)\r\n    );\r\n    const viewportWidth = Math.abs(\r\n      Math.ceil(size.chartWidth || exportOptions.width)\r\n    );\r\n\r\n    // Get the clip region for the page\r\n    const { x, y } = await getClipRegion(page);\r\n\r\n    // Set the final viewport now that we have the real height\r\n    await page.setViewport({\r\n      height: viewportHeight,\r\n      width: viewportWidth,\r\n      deviceScaleFactor: isSVG ? 1 : parseFloat(exportOptions.scale)\r\n    });\r\n\r\n    let data;\r\n    // Rasterization process\r\n    if (exportOptions.type === 'svg') {\r\n      // SVG\r\n      data = await createSVG(page);\r\n    } else if (['png', 'jpeg'].includes(exportOptions.type)) {\r\n      // PNG or JPEG\r\n      data = await createImage(\r\n        page,\r\n        exportOptions.type,\r\n        'base64',\r\n        {\r\n          width: viewportWidth,\r\n          height: viewportHeight,\r\n          x,\r\n          y\r\n        },\r\n        exportOptions.rasterizationTimeout\r\n      );\r\n    } else if (exportOptions.type === 'pdf') {\r\n      // PDF\r\n      data = await createPDF(\r\n        page,\r\n        viewportHeight,\r\n        viewportWidth,\r\n        'base64',\r\n        exportOptions.rasterizationTimeout\r\n      );\r\n    } else {\r\n      throw new ExportError(\r\n        `[export] Unsupported output format ${exportOptions.type}.`\r\n      );\r\n    }\r\n\r\n    // Clear previously injected JS and CSS resources\r\n    await clearPageResources(page, injectedResources);\r\n    return data;\r\n  } catch (error) {\r\n    await clearPageResources(page, injectedResources);\r\n    return error;\r\n  }\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport cssTemplate from './css.js';\r\n\r\nexport default (chart) => `\r\n<!DOCTYPE html>\r\n<html lang='en-US'>\r\n  <head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n    <title>Highcharts Export</title>\r\n  </head>\r\n  <style>\r\n    ${cssTemplate()}\r\n  </style>\r\n  <body>\r\n    <div id=\"chart-container\">\r\n      ${chart}\r\n    </div>\r\n  </body>\r\n</html>\r\n\r\n`;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { Pool } from 'tarn';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport {\r\n  create as createBrowser,\r\n  close as closeBrowser,\r\n  newPage,\r\n  clearPage\r\n} from './browser.js';\r\nimport puppeteerExport from './export.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { measureTime } from './utils.js';\r\n\r\nimport ExportError from './errors/ExportError.js';\r\n\r\n// The pool instance\r\nlet pool = false;\r\n\r\n// Pool statistics\r\nexport const stats = {\r\n  performedExports: 0,\r\n  exportAttempts: 0,\r\n  exportFromSvgAttempts: 0,\r\n  timeSpent: 0,\r\n  droppedExports: 0,\r\n  spentAverage: 0\r\n};\r\n\r\nlet poolConfig = {};\r\n\r\nconst factory = {\r\n  /**\r\n   * Creates a new worker page for the export pool.\r\n   *\r\n   * @returns {Object} - An object containing the worker ID, a reference to the\r\n   * browser page, and initial work count.\r\n   *\r\n   * @throws {ExportError} - If there's an error during the creation of the new\r\n   * page.\r\n   */\r\n  create: async () => {\r\n    let page = false;\r\n\r\n    const id = uuid();\r\n    const startDate = new Date().getTime();\r\n\r\n    try {\r\n      page = await newPage();\r\n\r\n      if (!page || page.isClosed()) {\r\n        throw new ExportError('The page is invalid or closed.');\r\n      }\r\n\r\n      log(\r\n        3,\r\n        `[pool] Successfully created a worker ${id} - took ${\r\n          new Date().getTime() - startDate\r\n        } ms.`\r\n      );\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        'Error encountered when creating a new page.'\r\n      ).setError(error);\r\n    }\r\n\r\n    return {\r\n      id,\r\n      page,\r\n      // Try to distribute the initial work count\r\n      workCount: Math.round(Math.random() * (poolConfig.workLimit / 2))\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Validates a worker page in the export pool, checking if it has exceeded\r\n   * the work limit.\r\n   *\r\n   * @param {Object} workerHandle - The handle to the worker, containing the\r\n   * worker's ID, a reference to the browser page, and work count.\r\n   *\r\n   * @returns {boolean} - Returns true if the worker is valid and within\r\n   * the work limit; otherwise, returns false.\r\n   */\r\n  validate: async (workerHandle) => {\r\n    // NOTE: In certain cases acquiring throws a TargetCloseError, which may\r\n    //       be caused by two things:\r\n    //         - The page is closed and attempted to be reused.\r\n    //         - Lost contact with the browser\r\n    //       What we're seeing in logs is that successive exports typically\r\n    //       succeeds, and the server recovers, indicating that it's likely\r\n    //       the first case. This is an attempt at allievating the issue by\r\n    //       simply not validating the worker if the page is null or closed.\r\n    //\r\n    //       The actual result from when this happened, was that a worker would\r\n    //       be completely locked, stopping it from being acquired until\r\n    //       its work count reached the limit.\r\n    if (!workerHandle.page || workerHandle.page?.isClosed()) {\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      poolConfig.workLimit &&\r\n      ++workerHandle.workCount > poolConfig.workLimit\r\n    ) {\r\n      log(\r\n        3,\r\n        `[pool] Worker failed validation: exceeded work limit (limit is ${poolConfig.workLimit}).`\r\n      );\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * Destroys a worker entry in the export pool, closing its associated page.\r\n   *\r\n   * @param {Object} workerHandle - The handle to the worker, containing\r\n   * the worker's ID and a reference to the browser page.\r\n   */\r\n  destroy: async (workerHandle) => {\r\n    log(3, `[pool] Destroying pool entry ${workerHandle.id}.`);\r\n\r\n    if (workerHandle.page && !workerHandle.page.isClosed()) {\r\n      await workerHandle.page.close();\r\n    }\r\n  }\r\n\r\n  // log: (message, level) => log(1, '[tarn] ' +  message)\r\n};\r\n\r\n/**\r\n * Initializes the export pool with the provided configuration, creating\r\n * a browser instance and setting up worker resources.\r\n *\r\n * @param {Object} config - Configuration options for the export pool along\r\n * with custom puppeteer arguments for the puppeteer.launch function.\r\n */\r\nexport const initPool = async (config) => {\r\n  // For the module scope usage\r\n  poolConfig = config && config.pool ? { ...config.pool } : {};\r\n\r\n  // Create a browser instance with the puppeteer arguments\r\n  await createBrowser(config.puppeteerArgs);\r\n\r\n  log(\r\n    3,\r\n    `[pool] Initializing pool with workers: min ${poolConfig.minWorkers}, max ${poolConfig.maxWorkers}.`\r\n  );\r\n\r\n  if (pool) {\r\n    return log(\r\n      4,\r\n      '[pool] Already initialized, please kill it before creating a new one.'\r\n    );\r\n  }\r\n\r\n  if (parseInt(poolConfig.minWorkers) > parseInt(poolConfig.maxWorkers)) {\r\n    poolConfig.minWorkers = poolConfig.maxWorkers;\r\n  }\r\n\r\n  try {\r\n    // Create a pool along with a minimal number of resources\r\n    pool = new Pool({\r\n      // Get the create/validate/destroy/log functions\r\n      ...factory,\r\n      min: parseInt(poolConfig.minWorkers),\r\n      max: parseInt(poolConfig.maxWorkers),\r\n      acquireTimeoutMillis: poolConfig.acquireTimeout,\r\n      createTimeoutMillis: poolConfig.createTimeout,\r\n      destroyTimeoutMillis: poolConfig.destroyTimeout,\r\n      idleTimeoutMillis: poolConfig.idleTimeout,\r\n      createRetryIntervalMillis: poolConfig.createRetryInterval,\r\n      reapIntervalMillis: poolConfig.reaperInterval,\r\n      propagateCreateError: false\r\n    });\r\n\r\n    // Set events\r\n    pool.on('release', async (resource) => {\r\n      // Clear page\r\n      const r = await clearPage(resource.page, false);\r\n      log(\r\n        4,\r\n        `[pool] Releasing a worker with ID ${resource.id}. Clear page status: ${r}.`\r\n      );\r\n    });\r\n\r\n    pool.on('destroySuccess', (eventId, resource) => {\r\n      log(4, `[pool] Destroyed a worker with ID ${resource.id}.`);\r\n      resource.page = null;\r\n    });\r\n\r\n    const initialResources = [];\r\n    // Create an initial number of resources\r\n    for (let i = 0; i < poolConfig.minWorkers; i++) {\r\n      try {\r\n        const resource = await pool.acquire().promise;\r\n        initialResources.push(resource);\r\n      } catch (error) {\r\n        logWithStack(2, error, '[pool] Could not create an initial resource.');\r\n      }\r\n    }\r\n\r\n    // Release the initial number of resources back to the pool\r\n    initialResources.forEach((resource) => {\r\n      pool.release(resource);\r\n    });\r\n\r\n    log(\r\n      3,\r\n      `[pool] The pool is ready${initialResources.length ? ` with ${initialResources.length} initial resources waiting.` : '.'}`\r\n    );\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[pool] Could not create the pool of workers.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Kills all workers in the pool, destroys the pool, and closes the browser\r\n * instance.\r\n *\r\n * @returns {Promise<void>} A promise that resolves after the workers are\r\n * killed, the pool is destroyed, and the browser is closed.\r\n */\r\nexport async function killPool() {\r\n  log(3, '[pool] Killing pool with all workers and closing browser.');\r\n\r\n  // If still alive, destroy the pool of pages before closing a browser\r\n  if (pool) {\r\n    // Free up not released workers\r\n    for (const worker of pool.used) {\r\n      pool.release(worker.resource);\r\n    }\r\n\r\n    // Destroy the pool if it is still available\r\n    if (!pool.destroyed) {\r\n      await pool.destroy();\r\n      log(4, '[browser] Destroyed the pool of resources.');\r\n    }\r\n  }\r\n\r\n  // Close the browser instance\r\n  await closeBrowser();\r\n}\r\n\r\n/**\r\n * Processes the export work using a worker from the pool. Acquires a worker\r\n * handle from the pool, performs the export using puppeteer, and releases\r\n * the worker handle back to the pool.\r\n *\r\n * @param {string} chart - The chart data or configuration to be exported.\r\n * @param {Object} options - Export options and configuration.\r\n *\r\n * @returns {Promise<Object>} A promise that resolves with the export resultand\r\n * options.\r\n *\r\n * @throws {ExportError} If an error occurs during the export process.\r\n */\r\nexport const postWork = async (chart, options) => {\r\n  let workerHandle;\r\n\r\n  try {\r\n    log(4, '[pool] Work received, starting to process.');\r\n\r\n    ++stats.exportAttempts;\r\n    if (poolConfig.benchmarking) {\r\n      getPoolInfo();\r\n    }\r\n\r\n    if (!pool) {\r\n      throw new ExportError('Work received, but pool has not been started.');\r\n    }\r\n\r\n    // Acquire the worker along with the id of resource and work count\r\n    const acquireCounter = measureTime();\r\n    try {\r\n      log(4, '[pool] Acquiring a worker handle.');\r\n      workerHandle = await pool.acquire().promise;\r\n\r\n      // Check the page acquire time\r\n      if (options.server.benchmarking) {\r\n        log(\r\n          5,\r\n          options.payload?.requestId\r\n            ? `[benchmark] Request with ID ${options.payload?.requestId} -`\r\n            : '[benchmark]',\r\n          `Acquired a worker handle: ${acquireCounter()}ms.`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      throw new ExportError(\r\n        (options.payload?.requestId\r\n          ? `For request with ID ${options.payload?.requestId} - `\r\n          : '') +\r\n          `Error encountered when acquiring an available entry: ${acquireCounter()}ms.`\r\n      ).setError(error);\r\n    }\r\n    log(4, '[pool] Acquired a worker handle.');\r\n\r\n    if (!workerHandle.page) {\r\n      throw new ExportError(\r\n        'Resolved worker page is invalid: the pool setup is wonky.'\r\n      );\r\n    }\r\n\r\n    // Save the start time\r\n    let workStart = new Date().getTime();\r\n\r\n    log(4, `[pool] Starting work on pool entry with ID ${workerHandle.id}.`);\r\n\r\n    // Perform an export on a puppeteer level\r\n    const exportCounter = measureTime();\r\n    const result = await puppeteerExport(workerHandle.page, chart, options);\r\n\r\n    // Check if it's an error\r\n    if (result instanceof Error) {\r\n      // NOTE: If there's a rasterization timeout, we want need to flush the page.\r\n      //       This is because the page may be in a state where it's waiting for\r\n      //       the screenshot to finish even though the timeout has occured.\r\n      //       Which of course causes a lot of issues with the event system,\r\n      //       and page consistency.\r\n      //\r\n      // NOTE: Only page.screenshot will throw this, timeouts for PDF's are\r\n      //       handled by the page.pdf function itself.\r\n      //\r\n      //       ...yes, this is ugly.\r\n      if (result.message === 'Rasterization timeout') {\r\n        workerHandle.workCount = poolConfig.workLimit + 1;\r\n        workerHandle.page = null;\r\n      }\r\n\r\n      if (\r\n        result.name === 'TimeoutError' ||\r\n        result.message === 'Rasterization timeout'\r\n      ) {\r\n        throw new ExportError(\r\n          'Rasterization timeout: your chart may be too complex or large, and failed to render within the allotted time.'\r\n        ).setError(result);\r\n      } else {\r\n        throw new ExportError(\r\n          (options.payload?.requestId\r\n            ? `For request with ID ${options.payload?.requestId} - `\r\n            : '') + `Error encountered during export: ${exportCounter()}ms.`\r\n        ).setError(result);\r\n      }\r\n    }\r\n\r\n    // Check the Puppeteer export time\r\n    if (options.server.benchmarking) {\r\n      log(\r\n        5,\r\n        options.payload?.requestId\r\n          ? `[benchmark] Request with ID ${options.payload?.requestId} -`\r\n          : '[benchmark]',\r\n        `Exported a chart sucessfully: ${exportCounter()}ms.`\r\n      );\r\n    }\r\n\r\n    // Release the resource back to the pool\r\n    pool.release(workerHandle);\r\n\r\n    // Used for statistics in averageTime and processedWorkCount, which\r\n    // in turn is used by the /health route.\r\n    const workEnd = new Date().getTime();\r\n    const exportTime = workEnd - workStart;\r\n    stats.timeSpent += exportTime;\r\n    stats.spentAverage = stats.timeSpent / ++stats.performedExports;\r\n\r\n    log(4, `[pool] Work completed in ${exportTime} ms.`);\r\n\r\n    // Otherwise return the result\r\n    return {\r\n      result,\r\n      options\r\n    };\r\n  } catch (error) {\r\n    ++stats.droppedExports;\r\n\r\n    if (workerHandle) {\r\n      pool.release(workerHandle);\r\n    }\r\n\r\n    throw new ExportError(`[pool] In pool.postWork: ${error.message}`).setError(\r\n      error\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves the current pool instance.\r\n *\r\n * @returns {Object|null} The current pool instance if initialized, or null\r\n * if the pool has not been created.\r\n */\r\nexport const getPool = () => pool;\r\n\r\n/**\r\n * Retrieves pool information in JSON format, including minimum and maximum\r\n * workers, available workers, workers in use, and pending acquire requests.\r\n *\r\n * @returns {Object} Pool information in JSON format.\r\n */\r\nexport const getPoolInfoJSON = () => ({\r\n  min: pool.min,\r\n  max: pool.max,\r\n  all: pool.numFree() + pool.numUsed(),\r\n  available: pool.numFree(),\r\n  used: pool.numUsed(),\r\n  pending: pool.numPendingAcquires()\r\n});\r\n\r\n/**\r\n * Logs information about the current state of the pool, including the minimum\r\n * and maximum workers, available workers, workers in use, and pending acquire\r\n * requests.\r\n */\r\nexport function getPoolInfo() {\r\n  const { min, max, all, available, used, pending } = getPoolInfoJSON();\r\n\r\n  log(5, `[pool] The minimum number of resources allowed by pool: ${min}.`);\r\n  log(5, `[pool] The maximum number of resources allowed by pool: ${max}.`);\r\n  log(5, `[pool] The number of all created resources: ${all}.`);\r\n  log(5, `[pool] The number of available resources: ${available}.`);\r\n  log(5, `[pool] The number of acquired resources: ${used}.`);\r\n  log(5, `[pool] The number of resources waiting to be acquired: ${pending}.`);\r\n}\r\n\r\nexport default {\r\n  initPool,\r\n  killPool,\r\n  postWork,\r\n  getPool,\r\n  getPoolInfo,\r\n  getPoolInfoJSON,\r\n  getStats: () => stats\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync, writeFileSync } from 'fs';\r\n\r\nimport { getOptions, initExportSettings } from './config.js';\r\nimport { log, logWithStack } from './logger.js';\r\nimport { killPool, postWork, stats } from './pool.js';\r\nimport {\r\n  fixType,\r\n  handleResources,\r\n  isCorrectJSON,\r\n  optionsStringify,\r\n  roundNumber,\r\n  toBoolean,\r\n  wrapAround\r\n} from './utils.js';\r\nimport { sanitize } from './sanitize.js';\r\nimport ExportError from './errors/ExportError.js';\r\n\r\nlet allowCodeExecution = false;\r\n\r\n/**\r\n * Starts an export process. The `settings` contains final options gathered\r\n * from all possible sources (config, env, cli, json). The `endCallback` is\r\n * called when the export is completed, with an error object as the first\r\n * argument and the second containing the base64 respresentation of a chart.\r\n *\r\n * @param {Object} settings - The settings object containing export\r\n * configuration.\r\n * @param {function} endCallback - The callback function to be invoked upon\r\n * finalizing work or upon error occurance of the exporting process.\r\n *\r\n * @returns {void} This function does not return a value directly; instead,\r\n * it communicates results via the endCallback.\r\n */\r\nexport const startExport = async (settings, endCallback) => {\r\n  // Starting exporting process message\r\n  log(4, '[chart] Starting the exporting process.');\r\n\r\n  // Initialize options\r\n  const options = initExportSettings(settings, getOptions());\r\n\r\n  // Get the export options\r\n  const exportOptions = options.export;\r\n\r\n  // If SVG is an input (argument can be sent only by the request)\r\n  if (options.payload?.svg && options.payload.svg !== '') {\r\n    try {\r\n      log(4, '[chart] Attempting to export from a SVG input.');\r\n\r\n      const result = exportAsString(\r\n        sanitize(options.payload.svg), // #209\r\n        options,\r\n        endCallback\r\n      );\r\n\r\n      ++stats.exportFromSvgAttempts;\r\n      return result;\r\n    } catch (error) {\r\n      return endCallback(\r\n        new ExportError('[chart] Error loading SVG input.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Export using options from the file\r\n  if (exportOptions.infile && exportOptions.infile.length) {\r\n    // Try to read the file to get the string representation\r\n    try {\r\n      log(4, '[chart] Attempting to export from an input file.');\r\n      options.export.instr = readFileSync(exportOptions.infile, 'utf8');\r\n      return exportAsString(options.export.instr.trim(), options, endCallback);\r\n    } catch (error) {\r\n      return endCallback(\r\n        new ExportError('[chart] Error loading input file.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // Export with options from the raw representation\r\n  if (\r\n    (exportOptions.instr && exportOptions.instr !== '') ||\r\n    (exportOptions.options && exportOptions.options !== '')\r\n  ) {\r\n    try {\r\n      log(4, '[chart] Attempting to export from a raw input.');\r\n\r\n      // Perform a direct inject when forced\r\n      if (toBoolean(options.customLogic?.allowCodeExecution)) {\r\n        return doStraightInject(options, endCallback);\r\n      }\r\n\r\n      // Either try to parse to JSON first or do the direct export\r\n      return typeof exportOptions.instr === 'string'\r\n        ? exportAsString(exportOptions.instr.trim(), options, endCallback)\r\n        : doExport(\r\n            options,\r\n            exportOptions.instr || exportOptions.options,\r\n            endCallback\r\n          );\r\n    } catch (error) {\r\n      return endCallback(\r\n        new ExportError('[chart] Error loading raw input.').setError(error)\r\n      );\r\n    }\r\n  }\r\n\r\n  // No input specified, pass an error message to the callback\r\n  return endCallback(\r\n    new ExportError(\r\n      `[chart] No valid input specified. Check if at least one of the following parameters is correctly set: 'infile', 'instr', 'options', or 'svg'.`\r\n    )\r\n  );\r\n};\r\n\r\n/**\r\n * Starts a batch export process for multiple charts based on the information\r\n * in the batch option. The batch is a string in the following format:\r\n * \"infile1.json=outfile1.png;infile2.json=outfile2.png;...\"\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * a batch export.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the batch export\r\n * process is completed.\r\n *\r\n * @throws {ExportError} Throws an ExportError if an error occurs during\r\n * any of the batch export process.\r\n */\r\nexport const batchExport = async (options) => {\r\n  const batchFunctions = [];\r\n\r\n  // Split and pair the --batch arguments\r\n  for (let pair of options.export.batch.split(';')) {\r\n    pair = pair.split('=');\r\n    if (pair.length === 2) {\r\n      batchFunctions.push(\r\n        startExport(\r\n          {\r\n            ...options,\r\n            export: {\r\n              ...options.export,\r\n              infile: pair[0],\r\n              outfile: pair[1]\r\n            }\r\n          },\r\n          (error, info) => {\r\n            // Throw an error\r\n            if (error) {\r\n              throw error;\r\n            }\r\n\r\n            // Save the base64 from a buffer to a correct image file\r\n            writeFileSync(\r\n              info.options.export.outfile,\r\n              info.options.export.type !== 'svg'\r\n                ? Buffer.from(info.result, 'base64')\r\n                : info.result\r\n            );\r\n          }\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  try {\r\n    // Await all exports are done\r\n    await Promise.all(batchFunctions);\r\n\r\n    // Kill pool and close browser after finishing batch export\r\n    await killPool();\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[chart] Error encountered during batch export.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Starts a single export process based on the specified options.\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * a single export.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the single export\r\n * process is completed.\r\n *\r\n * @throws {ExportError} Throws an ExportError if an error occurs during\r\n * the single export process.\r\n */\r\nexport const singleExport = async (options) => {\r\n  // Use instr or its alias, options\r\n  options.export.instr = options.export.instr || options.export.options;\r\n\r\n  // Perform an export\r\n  await startExport(options, async (error, info) => {\r\n    // Exit process when error\r\n    if (error) {\r\n      throw error;\r\n    }\r\n\r\n    const { outfile, type } = info.options.export;\r\n\r\n    // Save the base64 from a buffer to a correct image file\r\n    writeFileSync(\r\n      outfile || `chart.${type}`,\r\n      type !== 'svg' ? Buffer.from(info.result, 'base64') : info.result\r\n    );\r\n\r\n    // Kill pool and close browser after finishing single export\r\n    await killPool();\r\n  });\r\n};\r\n\r\n/**\r\n * Determines the size and scale for chart export based on the provided options.\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * chart export.\r\n *\r\n * @returns {Object} An object containing the calculated height, width,\r\n * and scale for the chart export.\r\n */\r\nexport const findChartSize = (options) => {\r\n  const { chart, exporting } =\r\n    options.export?.options || isCorrectJSON(options.export?.instr);\r\n\r\n  // See if globalOptions holds chart or exporting size\r\n  const globalOptions = isCorrectJSON(options.export?.globalOptions);\r\n\r\n  // Secure scale value\r\n  let scale =\r\n    options.export?.scale ||\r\n    exporting?.scale ||\r\n    globalOptions?.exporting?.scale ||\r\n    options.export?.defaultScale ||\r\n    1;\r\n\r\n  // the scale cannot be lower than 0.1 and cannot be higher than 5.0\r\n  scale = Math.max(0.1, Math.min(scale, 5.0));\r\n\r\n  // we want to round the numbers like 0.23234 -> 0.23\r\n  scale = roundNumber(scale, 2);\r\n\r\n  // Find chart size and scale\r\n  const size = {\r\n    height:\r\n      options.export?.height ||\r\n      exporting?.sourceHeight ||\r\n      chart?.height ||\r\n      globalOptions?.exporting?.sourceHeight ||\r\n      globalOptions?.chart?.height ||\r\n      options.export?.defaultHeight ||\r\n      400,\r\n    width:\r\n      options.export?.width ||\r\n      exporting?.sourceWidth ||\r\n      chart?.width ||\r\n      globalOptions?.exporting?.sourceWidth ||\r\n      globalOptions?.chart?.width ||\r\n      options.export?.defaultWidth ||\r\n      600,\r\n    scale\r\n  };\r\n\r\n  // Get rid of potential px and %\r\n  for (let [param, value] of Object.entries(size)) {\r\n    size[param] =\r\n      typeof value === 'string' ? +value.replace(/px|%/gi, '') : value;\r\n  }\r\n  return size;\r\n};\r\n\r\n/**\r\n * Function for finalizing options before export.\r\n *\r\n * @param {Object} options - The options object containing configuration for\r\n * the export process.\r\n * @param {Object} chartJson - The JSON representation of the chart.\r\n * @param {Function} endCallback - The callback function to be called upon\r\n * completion or error.\r\n * @param {string} svg - The SVG representation of the chart.\r\n *\r\n * @returns {Promise<void>} A Promise that resolves once the export process\r\n * is completed.\r\n */\r\nconst doExport = async (options, chartJson, endCallback, svg) => {\r\n  let { export: exportOptions, customLogic: customLogicOptions } = options;\r\n\r\n  const allowCodeExecutionScoped =\r\n    typeof customLogicOptions.allowCodeExecution === 'boolean'\r\n      ? customLogicOptions.allowCodeExecution\r\n      : allowCodeExecution;\r\n\r\n  if (!customLogicOptions) {\r\n    customLogicOptions = options.customLogic = {};\r\n  } else if (allowCodeExecutionScoped) {\r\n    if (typeof options.customLogic.resources === 'string') {\r\n      // Process resources\r\n      options.customLogic.resources = handleResources(\r\n        options.customLogic.resources,\r\n        toBoolean(options.customLogic.allowFileResources)\r\n      );\r\n    } else if (!options.customLogic.resources) {\r\n      try {\r\n        const resources = readFileSync('resources.json', 'utf8');\r\n        options.customLogic.resources = handleResources(\r\n          resources,\r\n          toBoolean(options.customLogic.allowFileResources)\r\n        );\r\n      } catch (error) {\r\n        logWithStack(\r\n          2,\r\n          error,\r\n          `[chart] Unable to load the default resources.json file.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // If the allowCodeExecution flag isn't set, we should refuse the usage\r\n  // of callback, resources, and custom code. Additionally, the worker will\r\n  // refuse to run arbitrary JavaScript. Prioritized should be the scoped\r\n  // option, then we should take a look at the overall pool option.\r\n  if (!allowCodeExecutionScoped && customLogicOptions) {\r\n    if (\r\n      customLogicOptions.callback ||\r\n      customLogicOptions.resources ||\r\n      customLogicOptions.customCode\r\n    ) {\r\n      // Send back a friendly message saying that the exporter does not support\r\n      // these settings.\r\n      return endCallback(\r\n        new ExportError(\r\n          `[chart] The 'callback', 'resources' and 'customCode' options have been disabled for this server.`\r\n        )\r\n      );\r\n    }\r\n\r\n    // Reset all additional custom code\r\n    customLogicOptions.callback = false;\r\n    customLogicOptions.resources = false;\r\n    customLogicOptions.customCode = false;\r\n  }\r\n\r\n  // Clean properties to keep it lean and mean\r\n  if (chartJson) {\r\n    chartJson.chart = chartJson.chart || {};\r\n    chartJson.exporting = chartJson.exporting || {};\r\n    chartJson.exporting.enabled = false;\r\n  }\r\n\r\n  exportOptions.constr = exportOptions.constr || 'chart';\r\n  exportOptions.type = fixType(exportOptions.type, exportOptions.outfile);\r\n  if (exportOptions.type === 'svg') {\r\n    exportOptions.width = false;\r\n  }\r\n\r\n  // Prepare global and theme options\r\n  ['globalOptions', 'themeOptions'].forEach((optionsName) => {\r\n    try {\r\n      if (exportOptions && exportOptions[optionsName]) {\r\n        if (\r\n          typeof exportOptions[optionsName] === 'string' &&\r\n          exportOptions[optionsName].endsWith('.json')\r\n        ) {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            readFileSync(exportOptions[optionsName], 'utf8'),\r\n            true\r\n          );\r\n        } else {\r\n          exportOptions[optionsName] = isCorrectJSON(\r\n            exportOptions[optionsName],\r\n            true\r\n          );\r\n        }\r\n      }\r\n    } catch (error) {\r\n      exportOptions[optionsName] = {};\r\n      logWithStack(2, error, `[chart] The '${optionsName}' cannot be loaded.`);\r\n    }\r\n  });\r\n\r\n  // Prepare the customCode\r\n  if (customLogicOptions.allowCodeExecution) {\r\n    try {\r\n      customLogicOptions.customCode = wrapAround(\r\n        customLogicOptions.customCode,\r\n        customLogicOptions.allowFileResources\r\n      );\r\n    } catch (error) {\r\n      logWithStack(2, error, `[chart] The 'customCode' cannot be loaded.`);\r\n    }\r\n  }\r\n\r\n  // Get the callback\r\n  if (\r\n    customLogicOptions &&\r\n    customLogicOptions.callback &&\r\n    customLogicOptions.callback?.indexOf('{') < 0\r\n  ) {\r\n    // The allowFileResources is always set to false for HTTP requests to avoid\r\n    // injecting arbitrary files from the fs\r\n    if (customLogicOptions.allowFileResources) {\r\n      try {\r\n        customLogicOptions.callback = readFileSync(\r\n          customLogicOptions.callback,\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        customLogicOptions.callback = false;\r\n        logWithStack(2, error, `[chart] The 'callback' cannot be loaded.`);\r\n      }\r\n    } else {\r\n      customLogicOptions.callback = false;\r\n    }\r\n  }\r\n\r\n  // Size search\r\n  options.export = {\r\n    ...options.export,\r\n    ...findChartSize(options)\r\n  };\r\n\r\n  // Post the work to the pool\r\n  try {\r\n    const result = await postWork(\r\n      exportOptions.strInj || chartJson || svg,\r\n      options\r\n    );\r\n    return endCallback(false, result);\r\n  } catch (error) {\r\n    return endCallback(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Performs a direct inject of options before export. The function attempts\r\n * to stringify the provided options and removes unnecessary characters,\r\n * ensuring a clean and formatted input. The resulting string is saved as\r\n * a \"stright inject\" string in the export options. It then invokes the\r\n * doExport function with the updated options.\r\n *\r\n * IMPORTANT: Dangerous and must be used deliberately by someone who sets up\r\n * a server (see the  --allowCodeExecution option).\r\n *\r\n * @param {Object} options - The export options containing the input\r\n * to be injected.\r\n * @param {function} endCallback - The callback function to be invoked\r\n * at the end of the process.\r\n *\r\n * @returns {Promise} A Promise that resolves with the result of the export\r\n * operation or rejects with an error if any issues occur during the process.\r\n */\r\nconst doStraightInject = (options, endCallback) => {\r\n  try {\r\n    let strInj;\r\n    let instr = options.export.instr || options.export.options;\r\n\r\n    if (typeof instr !== 'string') {\r\n      // Try to stringify options\r\n      strInj = instr = optionsStringify(\r\n        instr,\r\n        options.customLogic?.allowCodeExecution\r\n      );\r\n    }\r\n    strInj = instr.replaceAll(/\\t|\\n|\\r/g, '').trim();\r\n\r\n    // Get rid of the ;\r\n    if (strInj[strInj.length - 1] === ';') {\r\n      strInj = strInj.substring(0, strInj.length - 1);\r\n    }\r\n\r\n    // Save as stright inject string\r\n    options.export.strInj = strInj;\r\n    return doExport(options, false, endCallback);\r\n  } catch (error) {\r\n    return endCallback(\r\n      new ExportError(\r\n        `[chart] Malformed input detected for ${options.export?.requestId || '?'}. Please make sure that your JSON/JavaScript options are sent using the \"options\" attribute, and that if you're using SVG, it is unescaped.`\r\n      ).setError(error)\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Exports a string based on the provided options and invokes an end callback.\r\n *\r\n * @param {string} stringToExport - The string content to be exported.\r\n * @param {Object} options - Export options, including customLogic with\r\n * allowCodeExecution flag.\r\n * @param {Function} endCallback - Callback function to be invoked at the end\r\n * of the export process.\r\n *\r\n * @returns {any} Result of the export process or an error if encountered.\r\n */\r\nconst exportAsString = (stringToExport, options, endCallback) => {\r\n  const { allowCodeExecution } = options.customLogic;\r\n\r\n  // Check if it is SVG\r\n  if (\r\n    stringToExport.indexOf('<svg') >= 0 ||\r\n    stringToExport.indexOf('<?xml') >= 0\r\n  ) {\r\n    log(4, '[chart] Parsing input as SVG.');\r\n    return doExport(options, false, endCallback, stringToExport);\r\n  }\r\n\r\n  try {\r\n    // Try to parse to JSON and call the doExport function\r\n    const chartJSON = JSON.parse(stringToExport.replaceAll(/\\t|\\n|\\r/g, ' '));\r\n\r\n    // If a correct JSON, do the export\r\n    return doExport(options, chartJSON, endCallback);\r\n  } catch (error) {\r\n    // Not a valid JSON\r\n    if (toBoolean(allowCodeExecution)) {\r\n      return doStraightInject(options, endCallback);\r\n    } else {\r\n      // Do not allow straight injection without the allowCodeExecution flag\r\n      return endCallback(\r\n        new ExportError(\r\n          '[chart] Only JSON configurations and SVG are allowed for this server. If this is your server, JavaScript custom code can be enabled by starting the server with the --allowCodeExecution flag.'\r\n        ).setError(error)\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Retrieves and returns the current status of code execution permission.\r\n *\r\n * @returns {any} The value of allowCodeExecution.\r\n */\r\nexport const getAllowCodeExecution = () => allowCodeExecution;\r\n\r\n/**\r\n * Sets the code execution permission based on the provided boolean value.\r\n *\r\n * @param {any} value - The value to be converted and assigned\r\n * to allowCodeExecution.\r\n */\r\nexport const setAllowCodeExecution = (value) => {\r\n  allowCodeExecution = toBoolean(value);\r\n};\r\n\r\nexport default {\r\n  batchExport,\r\n  singleExport,\r\n  getAllowCodeExecution,\r\n  setAllowCodeExecution,\r\n  startExport,\r\n  findChartSize\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\n/**\r\n * @overview Used to sanitize the strings coming from the exporting module\r\n * to prevent XSS attacks (with the DOMPurify library).\r\n **/\r\n\r\nimport { JSDOM } from 'jsdom';\r\nimport DOMPurify from 'dompurify';\r\n\r\n/**\r\n * Sanitizes a given HTML string by removing <script> tags.\r\n * This function uses a regular expression to find and remove all\r\n * occurrences of <script>...</script> tags and any content within them.\r\n *\r\n * @param {string} input The HTML string to be sanitized.\r\n * @returns {string} The sanitized HTML string.\r\n */\r\nexport function sanitize(input) {\r\n  const window = new JSDOM('').window;\r\n  const purify = DOMPurify(window);\r\n  return purify.sanitize(input, {\r\n    ADD_TAGS: ['foreignObject'],\r\n    // Dissalow all xlinks in incoming SVG\r\n    FORBID_ATTR: ['xlink:href']\r\n  });\r\n}\r\n\r\nexport default sanitize;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { log } from './logger.js';\r\n\r\n// Array that contains ids of all ongoing intervals\r\nconst intervalIds = [];\r\n\r\n/**\r\n * Adds id of a setInterval to the intervalIds array.\r\n *\r\n * @param {NodeJS.Timeout} id - Id of an interval.\r\n */\r\nexport const addInterval = (id) => {\r\n  intervalIds.push(id);\r\n};\r\n\r\n/**\r\n * Clears all of ongoing intervals by ids gathered in the intervalIds array.\r\n */\r\nexport const clearAllIntervals = () => {\r\n  log(4, `[server] Clearing all registered intervals.`);\r\n  for (const id of intervalIds) {\r\n    clearInterval(id);\r\n  }\r\n};\r\n\r\nexport default {\r\n  addInterval,\r\n  clearAllIntervals\r\n};\r\n","import { envs } from '../envs.js';\r\nimport { logWithStack } from '../logger.js';\r\n\r\n/**\r\n * Middleware for logging errors with stack trace and handling error response.\r\n *\r\n * @param {Error} error - The error object.\r\n * @param {Express.Request} req - The Express request object.\r\n * @param {Express.Response} res - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n */\r\nconst logErrorMiddleware = (error, req, res, next) => {\r\n  // Display the error with stack in a correct format\r\n  logWithStack(1, error);\r\n\r\n  // Delete the stack for the environment other than the development\r\n  if (envs.OTHER_NODE_ENV !== 'development') {\r\n    delete error.stack;\r\n  }\r\n\r\n  // Call the returnErrorMiddleware\r\n  next(error);\r\n};\r\n\r\n/**\r\n * Middleware for returning error response.\r\n *\r\n * @param {Error} error - The error object.\r\n * @param {Express.Request} req - The Express request object.\r\n * @param {Express.Response} res - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n */\r\nconst returnErrorMiddleware = (error, req, res, next) => {\r\n  // Gather all requied information for the response\r\n  const { statusCode: stCode, status, message, stack } = error;\r\n  const statusCode = stCode || status || 400;\r\n\r\n  // Set and return response\r\n  res.status(statusCode).json({ statusCode, message, stack });\r\n};\r\n\r\nexport default (app) => {\r\n  // Add log error middleware\r\n  app.use(logErrorMiddleware);\r\n\r\n  // Add set status and return error middleware\r\n  app.use(returnErrorMiddleware);\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport rateLimit from 'express-rate-limit';\r\n\r\nimport { log } from '../logger.js';\r\n\r\n/**\r\n * Middleware for enabling rate limiting on the specified Express app.\r\n *\r\n * @param {Express} app - The Express app instance.\r\n * @param {Object} limitConfig - Configuration options for rate limiting.\r\n */\r\nexport default (app, limitConfig) => {\r\n  const msg =\r\n    'Too many requests, you have been rate limited. Please try again later.';\r\n\r\n  // Options for the rate limiter\r\n  const rateOptions = {\r\n    max: limitConfig.maxRequests || 30,\r\n    window: limitConfig.window || 1,\r\n    delay: limitConfig.delay || 0,\r\n    trustProxy: limitConfig.trustProxy || false,\r\n    skipKey: limitConfig.skipKey || false,\r\n    skipToken: limitConfig.skipToken || false\r\n  };\r\n\r\n  // Set if behind a proxy\r\n  if (rateOptions.trustProxy) {\r\n    app.enable('trust proxy');\r\n  }\r\n\r\n  // Create a limiter\r\n  const limiter = rateLimit({\r\n    windowMs: rateOptions.window * 60 * 1000,\r\n    // Limit each IP to 100 requests per windowMs\r\n    max: rateOptions.max,\r\n    // Disable delaying, full speed until the max limit is reached\r\n    delayMs: rateOptions.delay,\r\n    handler: (request, response) => {\r\n      response.format({\r\n        json: () => {\r\n          response.status(429).send({ message: msg });\r\n        },\r\n        default: () => {\r\n          response.status(429).send(msg);\r\n        }\r\n      });\r\n    },\r\n    skip: (request) => {\r\n      // Allow bypassing the limiter if a valid key/token has been sent\r\n      if (\r\n        rateOptions.skipKey !== false &&\r\n        rateOptions.skipToken !== false &&\r\n        request.query.key === rateOptions.skipKey &&\r\n        request.query.access_token === rateOptions.skipToken\r\n      ) {\r\n        log(4, '[rate limiting] Skipping rate limiter.');\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  });\r\n\r\n  // Use a limiter as a middleware\r\n  app.use(limiter);\r\n\r\n  log(\r\n    3,\r\n    `[rate limiting] Enabled rate limiting with ${rateOptions.max} requests per ${rateOptions.window} minute for each IP, trusting proxy: ${rateOptions.trustProxy}.`\r\n  );\r\n};\r\n","import ExportError from './ExportError.js';\r\n\r\nclass HttpError extends ExportError {\r\n  constructor(message, status) {\r\n    super(message);\r\n    this.status = this.statusCode = status;\r\n  }\r\n\r\n  setStatus(status) {\r\n    this.status = status;\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default HttpError;\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { updateVersion, version } from '../../cache.js';\r\nimport { envs } from '../../envs.js';\r\n\r\nimport HttpError from '../../errors/HttpError.js';\r\n\r\n/**\r\n * Adds the POST /change_hc_version/:newVersion route that can be utilized to modify\r\n * the Highcharts version on the server.\r\n *\r\n * TODO: Add auth token and connect to API\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.post(\r\n        '/version/change/:newVersion',\r\n        async (request, response, next) => {\r\n          try {\r\n            const adminToken = envs.HIGHCHARTS_ADMIN_TOKEN;\r\n\r\n            // Check the existence of the token\r\n            if (!adminToken || !adminToken.length) {\r\n              throw new HttpError(\r\n                'The server is not configured to perform run-time version changes: HIGHCHARTS_ADMIN_TOKEN is not set.',\r\n                401\r\n              );\r\n            }\r\n\r\n            // Check if the hc-auth header contain a correct token\r\n            const token = request.get('hc-auth');\r\n            if (!token || token !== adminToken) {\r\n              throw new HttpError(\r\n                'Invalid or missing token: Set the token in the hc-auth header.',\r\n                401\r\n              );\r\n            }\r\n\r\n            // Compare versions\r\n            const newVersion = request.params.newVersion;\r\n            if (newVersion) {\r\n              try {\r\n                // eslint-disable-next-line import/no-named-as-default-member\r\n                await updateVersion(newVersion);\r\n              } catch (error) {\r\n                throw new HttpError(\r\n                  `Version change: ${error.message}`,\r\n                  error.statusCode\r\n                ).setError(error);\r\n              }\r\n\r\n              // Success\r\n              response.status(200).send({\r\n                statusCode: 200,\r\n                version: version(),\r\n                message: `Successfully updated Highcharts to version: ${newVersion}.`\r\n              });\r\n            } else {\r\n              // No version specified\r\n              throw new HttpError('No new version supplied.', 400);\r\n            }\r\n          } catch (error) {\r\n            next(error);\r\n          }\r\n        }\r\n      );\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport { getAllowCodeExecution, startExport } from '../../chart.js';\r\nimport { getOptions, mergeConfigOptions } from '../../config.js';\r\nimport { log } from '../../logger.js';\r\nimport {\r\n  fixType,\r\n  isCorrectJSON,\r\n  isObjectEmpty,\r\n  isPrivateRangeUrlFound,\r\n  optionsStringify,\r\n  measureTime\r\n} from '../../utils.js';\r\n\r\nimport HttpError from '../../errors/HttpError.js';\r\n\r\n// Reversed MIME types\r\nconst reversedMime = {\r\n  png: 'image/png',\r\n  jpeg: 'image/jpeg',\r\n  gif: 'image/gif',\r\n  pdf: 'application/pdf',\r\n  svg: 'image/svg+xml'\r\n};\r\n\r\n// The requests counter\r\nlet requestsCounter = 0;\r\n\r\n// The array of callbacks to call before a request\r\nconst beforeRequest = [];\r\n\r\n// The array of callbacks to call after a request\r\nconst afterRequest = [];\r\n\r\n/**\r\n * Invokes an array of callback functions with specified parameters, allowing\r\n * customization of request handling.\r\n *\r\n * @param {Function[]} callbacks - An array of callback functions\r\n * to be executed.\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Object} data - An object containing parameters like id, uniqueId,\r\n * type, and body.\r\n *\r\n * @returns {boolean} - Returns a boolean indicating the overall result\r\n * of the callback invocations.\r\n */\r\nconst doCallbacks = (callbacks, request, response, data) => {\r\n  let result = true;\r\n  const { id, uniqueId, type, body } = data;\r\n\r\n  callbacks.some((callback) => {\r\n    if (callback) {\r\n      let callResponse = callback(request, response, id, uniqueId, type, body);\r\n\r\n      if (callResponse !== undefined && callResponse !== true) {\r\n        result = callResponse;\r\n      }\r\n\r\n      return true;\r\n    }\r\n  });\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Handles the export requests from the client.\r\n *\r\n * @param {Express.Request} request - The Express request object.\r\n * @param {Express.Response} response - The Express response object.\r\n * @param {Function} next - The next middleware function.\r\n *\r\n * @returns {Promise<void>} - A promise that resolves once the export process\r\n * is complete.\r\n */\r\nconst exportHandler = async (request, response, next) => {\r\n  try {\r\n    // Start counting time\r\n    const stopCounter = measureTime();\r\n\r\n    // Create a unique ID for a request\r\n    const uniqueId = uuid().replace(/-/g, '');\r\n\r\n    // Get the current server's general options\r\n    const defaultOptions = getOptions();\r\n\r\n    const body = request.body;\r\n    const id = ++requestsCounter;\r\n\r\n    let type = fixType(body.type);\r\n\r\n    // Throw 'Bad Request' if there's no body\r\n    if (!body || isObjectEmpty(body)) {\r\n      throw new HttpError(\r\n        'The request body is required. Please ensure that your Content-Type header is correct (accepted types are application/json and multipart/form-data).',\r\n        400\r\n      );\r\n    }\r\n\r\n    // All of the below can be used\r\n    let instr = isCorrectJSON(body.infile || body.options || body.data);\r\n\r\n    // Throw 'Bad Request' if there's no JSON or SVG to export\r\n    if (!instr && !body.svg) {\r\n      log(\r\n        2,\r\n        `The request with ID ${uniqueId} from ${\r\n          request.headers['x-forwarded-for'] || request.connection.remoteAddress\r\n        } was incorrect:\r\n  Content-Type: ${request.headers['content-type']}. \r\n  Chart constructor: ${body.constr}.\r\n  Dimensions: ${body.width}x${body.height} @ ${body.scale} scale.\r\n  Type: ${type}.\r\n  Is SVG set? ${typeof body.svg !== 'undefined'}.\r\n  B64? ${typeof body.b64 !== 'undefined'}.\r\n  No download? ${typeof body.noDownload !== 'undefined'}.\r\n\r\n  Payload received: ${JSON.stringify(body.infile || body.options || body.data || body.svg)}\r\n\r\n  `\r\n      );\r\n\r\n      throw new HttpError(\r\n        \"No correct chart data found. Ensure that you are using either application/json or multipart/form-data headers. If sending JSON, make sure the chart data is in the 'infile', 'options', or 'data' attribute. If sending SVG, ensure it is in the 'svg' attribute.\",\r\n        400\r\n      );\r\n    }\r\n\r\n    let callResponse = false;\r\n\r\n    // Call the before request functions\r\n    callResponse = doCallbacks(beforeRequest, request, response, {\r\n      id,\r\n      uniqueId,\r\n      type,\r\n      body\r\n    });\r\n\r\n    // Block the request if one of a callbacks failed\r\n    if (callResponse !== true) {\r\n      return response.send(callResponse);\r\n    }\r\n\r\n    let connectionAborted = false;\r\n\r\n    // In case the connection is closed, force to abort further actions\r\n    request.socket.on('close', (hadErrors) => {\r\n      if (hadErrors) {\r\n        connectionAborted = true;\r\n      }\r\n    });\r\n\r\n    log(4, `[export] Got an incoming HTTP request with ID ${uniqueId}.`);\r\n\r\n    body.constr = (typeof body.constr === 'string' && body.constr) || 'chart';\r\n\r\n    // Gather and organize options from the payload\r\n    const requestOptions = {\r\n      export: {\r\n        instr,\r\n        type,\r\n        constr: body.constr[0].toLowerCase() + body.constr.substr(1),\r\n        height: body.height,\r\n        width: body.width,\r\n        scale: body.scale || defaultOptions.export.scale,\r\n        globalOptions: isCorrectJSON(body.globalOptions, true),\r\n        themeOptions: isCorrectJSON(body.themeOptions, true)\r\n      },\r\n      customLogic: {\r\n        allowCodeExecution: getAllowCodeExecution(),\r\n        allowFileResources: false,\r\n        resources: isCorrectJSON(body.resources, true),\r\n        callback: body.callback,\r\n        customCode: body.customCode\r\n      }\r\n    };\r\n\r\n    if (instr) {\r\n      // Stringify JSON with options\r\n      requestOptions.export.instr = optionsStringify(\r\n        instr,\r\n        requestOptions.customLogic.allowCodeExecution\r\n      );\r\n    }\r\n\r\n    // Merge the request options into default ones\r\n    const options = mergeConfigOptions(defaultOptions, requestOptions);\r\n\r\n    // Save the JSON if exists\r\n    options.export.options = instr;\r\n\r\n    // Lastly, add the server specific arguments into options as payload\r\n    options.payload = {\r\n      svg: body.svg || false,\r\n      b64: body.b64 || false,\r\n      noDownload: body.noDownload || false,\r\n      requestId: uniqueId\r\n    };\r\n\r\n    // Test xlink:href elements from payload's SVG\r\n    if (body.svg && isPrivateRangeUrlFound(options.payload.svg)) {\r\n      throw new HttpError(\r\n        'SVG potentially contain at least one forbidden URL in xlink:href element. Please review the SVG content and ensure that all referenced URLs comply with security policies.',\r\n        400\r\n      );\r\n    }\r\n\r\n    // Start the export process\r\n    await startExport(options, (error, info) => {\r\n      // Remove the close event from the socket\r\n      request.socket.removeAllListeners('close');\r\n\r\n      // After the whole exporting process\r\n      if (defaultOptions.server.benchmarking) {\r\n        log(\r\n          5,\r\n          `[benchmark] Request with ID ${uniqueId} - After the whole exporting process: ${stopCounter()}ms.`\r\n        );\r\n      }\r\n\r\n      // If the connection was closed, do nothing\r\n      if (connectionAborted) {\r\n        return log(\r\n          3,\r\n          `[export] The client closed the connection before the chart finished processing.`\r\n        );\r\n      }\r\n\r\n      // If error, log it and send it to the error middleware\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // If data is missing, log the message and send it to the error middleware\r\n      if (!info || !info.result) {\r\n        throw new HttpError(\r\n          `Unexpected return from chart generation. Please check your request data. For the request with ID ${uniqueId}, the result is ${info.result}.`,\r\n          400\r\n        );\r\n      }\r\n\r\n      // Get the type from options\r\n      type = info.options.export.type;\r\n\r\n      // The after request callbacks\r\n      doCallbacks(afterRequest, request, response, { id, body: info.result });\r\n\r\n      if (info.result) {\r\n        // If only base64 is required, return it\r\n        if (body.b64) {\r\n          // SVG Exception for the Highcharts 11.3.0 version\r\n          if (type === 'pdf' || type == 'svg') {\r\n            return response.send(\r\n              Buffer.from(info.result, 'utf8').toString('base64')\r\n            );\r\n          }\r\n\r\n          return response.send(info.result);\r\n        }\r\n\r\n        // Set correct content type\r\n        response.header('Content-Type', reversedMime[type] || 'image/png');\r\n\r\n        // Decide whether to download or not chart file\r\n        if (!body.noDownload) {\r\n          response.attachment(\r\n            `${request.params.filename || request.body.filename || 'chart'}.${\r\n              type || 'png'\r\n            }`\r\n          );\r\n        }\r\n\r\n        // If SVG, return plain content\r\n        return type === 'svg'\r\n          ? response.send(info.result)\r\n          : response.send(Buffer.from(info.result, 'base64'));\r\n      }\r\n    });\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n};\r\n\r\nexport default (app) => {\r\n  /**\r\n   * Adds the POST / a route for handling POST requests at the root endpoint.\r\n   */\r\n  app.post('/', exportHandler);\r\n\r\n  /**\r\n   * Adds the POST /:filename a route for handling POST requests with\r\n   * a specified filename parameter.\r\n   */\r\n  app.post('/:filename', exportHandler);\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { readFileSync } from 'fs';\r\nimport { join as pather } from 'path';\r\nimport { log } from '../../logger.js';\r\n\r\nimport { version } from '../../cache.js';\r\nimport { addInterval } from '../../intervals.js';\r\nimport pool from '../../pool.js';\r\nimport { __dirname } from '../../utils.js';\r\n\r\nconst pkgFile = JSON.parse(readFileSync(pather(__dirname, 'package.json')));\r\n\r\nconst serverStartTime = new Date();\r\n\r\nconst successRates = [];\r\nconst recordInterval = 60 * 1000; // record every minute\r\nconst windowSize = 30; // 30 minutes\r\n\r\n/**\r\n * Calculates moving average indicator based on the data from the successRates\r\n * array.\r\n *\r\n * @returns {number} - A moving average for success ratio of the server exports.\r\n */\r\nfunction calculateMovingAverage() {\r\n  const sum = successRates.reduce((a, b) => a + b, 0);\r\n  return sum / successRates.length;\r\n}\r\n\r\n/**\r\n * Starts the interval responsible for calculating current success rate ratio\r\n * and gathers\r\n *\r\n * @returns {NodeJS.Timeout} id - Id of an interval.\r\n */\r\nexport const startSuccessRate = () =>\r\n  setInterval(() => {\r\n    const stats = pool.getStats();\r\n    const successRatio =\r\n      stats.exportAttempts === 0\r\n        ? 1\r\n        : (stats.performedExports / stats.exportAttempts) * 100;\r\n\r\n    successRates.push(successRatio);\r\n    if (successRates.length > windowSize) {\r\n      successRates.shift();\r\n    }\r\n  }, recordInterval);\r\n\r\n/**\r\n * Adds the /health and /success-moving-average routes\r\n * which output basic stats for the server.\r\n */\r\nexport default function addHealthRoutes(app) {\r\n  if (!app) {\r\n    return false;\r\n  }\r\n\r\n  // Start processing success rate ratio interval and save its id to the array\r\n  // for the graceful clearing on shutdown with injected addInterval funtion\r\n  addInterval(startSuccessRate());\r\n\r\n  app.get('/health', (_, res) => {\r\n    const stats = pool.getStats();\r\n    const period = successRates.length;\r\n    const movingAverage = calculateMovingAverage();\r\n\r\n    log(4, '[health.js] GET /health [200] - returning server health.');\r\n\r\n    res.send({\r\n      status: 'OK',\r\n      bootTime: serverStartTime,\r\n      uptime:\r\n        Math.floor(\r\n          (new Date().getTime() - serverStartTime.getTime()) / 1000 / 60\r\n        ) + ' minutes',\r\n      version: pkgFile.version,\r\n      highchartsVersion: version(),\r\n      averageProcessingTime: stats.spentAverage,\r\n      performedExports: stats.performedExports,\r\n      failedExports: stats.droppedExports,\r\n      exportAttempts: stats.exportAttempts,\r\n      sucessRatio: (stats.performedExports / stats.exportAttempts) * 100,\r\n      // eslint-disable-next-line import/no-named-as-default-member\r\n      pool: pool.getPoolInfoJSON(),\r\n\r\n      // Moving average\r\n      period,\r\n      movingAverage,\r\n      message:\r\n        isNaN(movingAverage) || !successRates.length\r\n          ? 'Too early to report. No exports made yet. Please check back soon.'\r\n          : `Last ${period} minutes had a success rate of ${movingAverage.toFixed(2)}%.`,\r\n\r\n      // SVG/JSON attempts\r\n      svgExportAttempts: stats.exportFromSvgAttempts,\r\n      jsonExportAttempts: stats.performedExports - stats.exportFromSvgAttempts\r\n    });\r\n  });\r\n}\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { promises as fsPromises } from 'fs';\r\nimport { posix } from 'path';\r\n\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport http from 'http';\r\nimport https from 'https';\r\nimport multer from 'multer';\r\n\r\nimport errorHandler from './error.js';\r\nimport rateLimit from './rate_limit.js';\r\nimport { log, logWithStack } from '../logger.js';\r\nimport { __dirname } from '../utils.js';\r\n\r\nimport vSwitchRoute from './routes/change_hc_version.js';\r\nimport exportRoutes from './routes/export.js';\r\nimport healthRoute from './routes/health.js';\r\nimport uiRoute from './routes/ui.js';\r\n\r\nimport ExportError from '../errors/ExportError.js';\r\n\r\n// Array of an active servers\r\nconst activeServers = new Map();\r\n\r\n// Create express app\r\nconst app = express();\r\n\r\n// Disable the X-Powered-By header\r\napp.disable('x-powered-by');\r\n\r\n// Enable CORS support\r\napp.use(cors());\r\n\r\n// Getting a lot of RangeNotSatisfiableError exception.\r\n// Even though this is a deprecated options, let's try to set it to false.\r\napp.use((_req, res, next) => {\r\n  res.set('Accept-Ranges', 'none');\r\n  next();\r\n});\r\n\r\n// TODO: Read from config/env\r\n// NOTE:\r\n// Too big limits lead to timeouts in the export process when the\r\n// rasterization timeout is set too low.\r\nconst uploadLimitMiB = 3;\r\nconst uploadLimitBytes = uploadLimitMiB * 1024 * 1024;\r\n\r\n// Enable parsing of form data (files) with Multer package\r\nconst storage = multer.memoryStorage();\r\nconst upload = multer({\r\n  storage,\r\n  limits: {\r\n    fieldSize: uploadLimitBytes\r\n  }\r\n});\r\n\r\n// Enable body parser\r\napp.use(express.json({ limit: uploadLimitBytes }));\r\napp.use(express.urlencoded({ extended: true, limit: uploadLimitBytes }));\r\n\r\n// Use only non-file multipart form fields\r\napp.use(upload.none());\r\n\r\n/**\r\n * Attach error handlers to the server.\r\n *\r\n * @param {http.Server} server - The HTTP/HTTPS server instance.\r\n */\r\nconst attachServerErrorHandlers = (server) => {\r\n  server.on('clientError', (error, socket) => {\r\n    logWithStack(\r\n      1,\r\n      error,\r\n      `[server] Client error: ${error.message}, destroying socket.`\r\n    );\r\n    socket.destroy();\r\n  });\r\n\r\n  server.on('error', (error) => {\r\n    logWithStack(1, error, `[server] Server error: ${error.message}`);\r\n  });\r\n\r\n  server.on('connection', (socket) => {\r\n    socket.on('error', (error) => {\r\n      logWithStack(1, error, `[server] Socket error: ${error.message}`);\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Starts an HTTP server based on the provided configuration. The `serverConfig`\r\n * object contains all server related properties (see the `server` section\r\n * in the `lib/schemas/config.js` file for a reference).\r\n *\r\n * @param {Object} serverConfig - The server configuration object.\r\n *\r\n * @throws {ExportError} - Throws an error if the server cannot be configured\r\n * and started.\r\n */\r\nexport const startServer = async (serverConfig) => {\r\n  try {\r\n    // Stop if not enabled\r\n    if (!serverConfig.enable) {\r\n      return false;\r\n    }\r\n\r\n    // Listen HTTP server\r\n    if (!serverConfig.ssl.force) {\r\n      // Main server instance (HTTP)\r\n      const httpServer = http.createServer(app);\r\n\r\n      // Attach error handlers and listen to the server\r\n      attachServerErrorHandlers(httpServer);\r\n\r\n      // Listen\r\n      httpServer.listen(serverConfig.port, serverConfig.host);\r\n\r\n      // Save the reference to HTTP server\r\n      activeServers.set(serverConfig.port, httpServer);\r\n\r\n      log(\r\n        3,\r\n        `[server] Started HTTP server on ${serverConfig.host}:${serverConfig.port}.`\r\n      );\r\n    }\r\n\r\n    // Listen HTTPS server\r\n    if (serverConfig.ssl.enable) {\r\n      // Set up an SSL server also\r\n      let key, cert;\r\n\r\n      try {\r\n        // Get the SSL key\r\n        key = await fsPromises.readFile(\r\n          posix.join(serverConfig.ssl.certPath, 'server.key'),\r\n          'utf8'\r\n        );\r\n\r\n        // Get the SSL certificate\r\n        cert = await fsPromises.readFile(\r\n          posix.join(serverConfig.ssl.certPath, 'server.crt'),\r\n          'utf8'\r\n        );\r\n      } catch (error) {\r\n        log(\r\n          2,\r\n          `[server] Unable to load key/certificate from the '${serverConfig.ssl.certPath}' path. Could not run secured layer server.`\r\n        );\r\n      }\r\n\r\n      if (key && cert) {\r\n        // Main server instance (HTTPS)\r\n        const httpsServer = https.createServer({ key, cert }, app);\r\n\r\n        // Attach error handlers and listen to the server\r\n        attachServerErrorHandlers(httpsServer);\r\n\r\n        // Listen\r\n        httpsServer.listen(serverConfig.ssl.port, serverConfig.host);\r\n\r\n        // Save the reference to HTTPS server\r\n        activeServers.set(serverConfig.ssl.port, httpsServer);\r\n\r\n        log(\r\n          3,\r\n          `[server] Started HTTPS server on ${serverConfig.host}:${serverConfig.ssl.port}.`\r\n        );\r\n      }\r\n    }\r\n\r\n    // Enable the rate limiter if config says so\r\n    if (\r\n      serverConfig.rateLimiting &&\r\n      serverConfig.rateLimiting.enable &&\r\n      ![0, NaN].includes(serverConfig.rateLimiting.maxRequests)\r\n    ) {\r\n      rateLimit(app, serverConfig.rateLimiting);\r\n    }\r\n\r\n    // Set up static folder's route\r\n    app.use(express.static(posix.join(__dirname, 'public')));\r\n\r\n    // Set up routes\r\n    healthRoute(app);\r\n    exportRoutes(app);\r\n    uiRoute(app);\r\n    vSwitchRoute(app);\r\n\r\n    // Set up centralized error handler\r\n    errorHandler(app);\r\n  } catch (error) {\r\n    throw new ExportError(\r\n      '[server] Could not configure and start the server.'\r\n    ).setError(error);\r\n  }\r\n};\r\n\r\n/**\r\n * Closes all servers associated with Express app instance.\r\n */\r\nexport const closeServers = () => {\r\n  log(4, `[server] Closing all servers.`);\r\n  for (const [port, server] of activeServers) {\r\n    server.close(() => {\r\n      activeServers.delete(port);\r\n      log(4, `[server] Closed server on port: ${port}.`);\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Get all servers associated with Express app instance.\r\n *\r\n * @returns {Array} - Servers associated with Express app instance.\r\n */\r\nexport const getServers = () => activeServers;\r\n\r\n/**\r\n * Enable rate limiting for the server.\r\n *\r\n * @param {Object} limitConfig - Configuration object for rate limiting.\r\n */\r\nexport const enableRateLimiting = (limitConfig) => rateLimit(app, limitConfig);\r\n\r\n/**\r\n * Get the Express instance.\r\n *\r\n * @returns {Object} - The Express instance.\r\n */\r\nexport const getExpress = () => express;\r\n\r\n/**\r\n * Get the Express app instance.\r\n *\r\n * @returns {Object} - The Express app instance.\r\n */\r\nexport const getApp = () => app;\r\n\r\n/**\r\n * Apply middleware(s) to a specific path.\r\n *\r\n * @param {string} path - The path to which the middleware(s) should be applied.\r\n * @param {...Function} middlewares - The middleware functions to be applied.\r\n */\r\nexport const use = (path, ...middlewares) => {\r\n  app.use(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Set up a route with GET method and apply middleware(s).\r\n *\r\n * @param {string} path - The route path.\r\n * @param {...Function} middlewares - The middleware functions to be applied.\r\n */\r\nexport const get = (path, ...middlewares) => {\r\n  app.get(path, ...middlewares);\r\n};\r\n\r\n/**\r\n * Set up a route with POST method and apply middleware(s).\r\n *\r\n * @param {string} path - The route path.\r\n * @param {...Function} middlewares - The middleware functions to be applied.\r\n */\r\nexport const post = (path, ...middlewares) => {\r\n  app.post(path, ...middlewares);\r\n};\r\n\r\nexport default {\r\n  startServer,\r\n  closeServers,\r\n  getServers,\r\n  enableRateLimiting,\r\n  getExpress,\r\n  getApp,\r\n  use,\r\n  get,\r\n  post\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { join } from 'path';\r\n\r\nimport { __dirname } from '../../utils.js';\r\n\r\n/**\r\n * Adds the GET / route for a UI when enabled on the export server.\r\n */\r\nexport default (app) =>\r\n  !app\r\n    ? false\r\n    : app.get('/', (_request, response) => {\r\n        response.sendFile(join(__dirname, 'public', 'index.html'), {\r\n          acceptRanges: false\r\n        });\r\n      });\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport { clearAllIntervals } from './intervals.js';\r\nimport { killPool } from './pool.js';\r\nimport { closeServers } from './server/server.js';\r\n\r\n/**\r\n * Clean up function to trigger before ending process for the graceful shutdown.\r\n *\r\n * @param {number} exitCode - An exit code for the process.exit() function.\r\n */\r\nexport const shutdownCleanUp = async (exitCode) => {\r\n  // Await freeing all resources\r\n  await Promise.allSettled([\r\n    // Clear all ongoing intervals\r\n    clearAllIntervals(),\r\n\r\n    // Get available server instances (HTTP/HTTPS) and close them\r\n    closeServers(),\r\n\r\n    // Close pool along with its workers and the browser instance, if exists\r\n    killPool()\r\n  ]);\r\n\r\n  // Exit process with a correct code\r\n  process.exit(exitCode);\r\n};\r\n\r\nexport default {\r\n  shutdownCleanUp\r\n};\r\n","/*******************************************************************************\r\n\r\nHighcharts Export Server\r\n\r\nCopyright (c) 2016-2024, Highsoft\r\n\r\nLicenced under the MIT licence.\r\n\r\nAdditionally a valid Highcharts license is required for use.\r\n\r\nSee LICENSE file in root for details.\r\n\r\n*******************************************************************************/\r\n\r\nimport 'colors';\r\n\r\nimport { checkAndUpdateCache } from './cache.js';\r\nimport {\r\n  batchExport,\r\n  setAllowCodeExecution,\r\n  singleExport,\r\n  startExport\r\n} from './chart.js';\r\nimport { mapToNewConfig, manualConfig, setOptions } from './config.js';\r\nimport {\r\n  initLogging,\r\n  log,\r\n  logWithStack,\r\n  setLogLevel,\r\n  enableFileLogging\r\n} from './logger.js';\r\nimport { initPool, killPool } from './pool.js';\r\nimport { shutdownCleanUp } from './resource_release.js';\r\nimport server, { startServer } from './server/server.js';\r\nimport { printLogo, printUsage } from './utils.js';\r\n\r\n/**\r\n * Attaches exit listeners to the process, ensuring proper cleanup of resources\r\n * and termination on exit signals. Handles 'exit', 'SIGINT', 'SIGTERM', and\r\n * 'uncaughtException' events.\r\n */\r\nconst attachProcessExitListeners = () => {\r\n  log(3, '[process] Attaching exit listeners to the process.');\r\n\r\n  // Handler for the 'exit'\r\n  process.on('exit', (code) => {\r\n    log(4, `Process exited with code ${code}.`);\r\n  });\r\n\r\n  // Handler for the 'SIGINT'\r\n  process.on('SIGINT', async (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    await shutdownCleanUp(0);\r\n  });\r\n\r\n  // Handler for the 'SIGTERM'\r\n  process.on('SIGTERM', async (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    await shutdownCleanUp(0);\r\n  });\r\n\r\n  // Handler for the 'SIGHUP'\r\n  process.on('SIGHUP', async (name, code) => {\r\n    log(4, `The ${name} event with code: ${code}.`);\r\n    await shutdownCleanUp(0);\r\n  });\r\n\r\n  // Handler for the 'uncaughtException'\r\n  process.on('uncaughtException', async (error, name) => {\r\n    logWithStack(1, error, `The ${name} error.`);\r\n    await shutdownCleanUp(1);\r\n  });\r\n};\r\n\r\n/**\r\n * Initializes the export process. Tasks such as configuring logging, checking\r\n * cache and sources, and initializing the pool of resources happen during\r\n * this stage. Function that is required to be called before trying to export charts or setting a server. The `options` is an object that contains all options.\r\n *\r\n * @param {Object} options - All export options.\r\n *\r\n * @returns {Promise<Object>} Promise resolving to the updated export options.\r\n */\r\nconst initExport = async (options) => {\r\n  // Set the allowCodeExecution per export module scope\r\n  setAllowCodeExecution(\r\n    options.customLogic && options.customLogic.allowCodeExecution\r\n  );\r\n\r\n  // Init the logging\r\n  initLogging(options.logging);\r\n\r\n  // Attach process' exit listeners\r\n  if (options.other.listenToProcessExits) {\r\n    attachProcessExitListeners();\r\n  }\r\n\r\n  // Check if cache needs to be updated\r\n  await checkAndUpdateCache(options);\r\n\r\n  // Init the pool\r\n  await initPool({\r\n    pool: options.pool || {\r\n      minWorkers: 1,\r\n      maxWorkers: 1\r\n    },\r\n    puppeteerArgs: options.puppeteer.args || []\r\n  });\r\n\r\n  // Return updated options\r\n  return options;\r\n};\r\n\r\nexport default {\r\n  // Server\r\n  server,\r\n  startServer,\r\n\r\n  // Exporting\r\n  initExport,\r\n  singleExport,\r\n  batchExport,\r\n  startExport,\r\n\r\n  // Pool\r\n  initPool,\r\n  killPool,\r\n\r\n  // Other\r\n  setOptions,\r\n  shutdownCleanUp,\r\n\r\n  // Logs\r\n  log,\r\n  logWithStack,\r\n  setLogLevel,\r\n  enableFileLogging,\r\n\r\n  // Utils\r\n  mapToNewConfig,\r\n  manualConfig,\r\n  printLogo,\r\n  printUsage\r\n};\r\n"],"names":["scriptsNames","core","modules","indicators","custom","defaultConfig","puppeteer","args","value","type","description","highcharts","version","envLink","cdnURL","coreScripts","moduleScripts","indicatorScripts","customScripts","forceFetch","cachePath","export","infile","instr","options","outfile","constr","defaultHeight","defaultWidth","defaultScale","height","width","scale","globalOptions","themeOptions","batch","rasterizationTimeout","customLogic","allowCodeExecution","allowFileResources","customCode","callback","resources","loadConfig","legacyName","createConfig","server","enable","cliName","host","port","benchmarking","proxy","timeout","rateLimiting","maxRequests","window","delay","trustProxy","skipKey","skipToken","ssl","force","certPath","pool","minWorkers","maxWorkers","workLimit","acquireTimeout","createTimeout","destroyTimeout","idleTimeout","createRetryInterval","reaperInterval","logging","level","file","dest","toConsole","toFile","ui","route","other","nodeEnv","listenToProcessExits","noLogo","hardResetPage","browserShellMode","debug","headless","devtools","listenToConsole","dumpio","slowMo","debuggingPort","promptsConfig","name","message","initial","join","separator","instructions","choices","hint","min","max","round","absoluteProps","nestedArgs","createNestedArgs","obj","propChain","Object","keys","forEach","k","includes","entry","substring","undefined","dotenv","config","v","filterArray","z","string","transform","split","map","trim","filter","length","enum","values","refine","isNaN","parseFloat","envs","object","HIGHCHARTS_VERSION","test","HIGHCHARTS_CDN_URL","startsWith","HIGHCHARTS_CORE_SCRIPTS","HIGHCHARTS_MODULE_SCRIPTS","HIGHCHARTS_INDICATOR_SCRIPTS","HIGHCHARTS_FORCE_FETCH","HIGHCHARTS_CACHE_PATH","HIGHCHARTS_ADMIN_TOKEN","EXPORT_TYPE","EXPORT_CONSTR","EXPORT_DEFAULT_HEIGHT","EXPORT_DEFAULT_WIDTH","EXPORT_DEFAULT_SCALE","EXPORT_RASTERIZATION_TIMEOUT","CUSTOM_LOGIC_ALLOW_CODE_EXECUTION","CUSTOM_LOGIC_ALLOW_FILE_RESOURCES","SERVER_ENABLE","SERVER_HOST","SERVER_PORT","SERVER_BENCHMARKING","SERVER_PROXY_HOST","SERVER_PROXY_PORT","SERVER_PROXY_TIMEOUT","SERVER_RATE_LIMITING_ENABLE","SERVER_RATE_LIMITING_MAX_REQUESTS","SERVER_RATE_LIMITING_WINDOW","SERVER_RATE_LIMITING_DELAY","SERVER_RATE_LIMITING_TRUST_PROXY","SERVER_RATE_LIMITING_SKIP_KEY","SERVER_RATE_LIMITING_SKIP_TOKEN","SERVER_SSL_ENABLE","SERVER_SSL_FORCE","SERVER_SSL_PORT","SERVER_SSL_CERT_PATH","POOL_MIN_WORKERS","POOL_MAX_WORKERS","POOL_WORK_LIMIT","POOL_ACQUIRE_TIMEOUT","POOL_CREATE_TIMEOUT","POOL_DESTROY_TIMEOUT","POOL_IDLE_TIMEOUT","POOL_CREATE_RETRY_INTERVAL","POOL_REAPER_INTERVAL","POOL_BENCHMARKING","LOGGING_LEVEL","LOGGING_FILE","LOGGING_DEST","LOGGING_TO_CONSOLE","LOGGING_TO_FILE","UI_ENABLE","UI_ROUTE","OTHER_NODE_ENV","OTHER_LISTEN_TO_PROCESS_EXITS","OTHER_NO_LOGO","OTHER_HARD_RESET_PAGE","OTHER_BROWSER_SHELL_MODE","DEBUG_ENABLE","DEBUG_HEADLESS","DEBUG_DEVTOOLS","DEBUG_LISTEN_TO_CONSOLE","DEBUG_DUMPIO","DEBUG_SLOW_MO","DEBUG_DEBUGGING_PORT","partial","parse","process","env","colors","pathCreated","levelsDesc","title","color","listeners","logToFile","texts","prefix","existsSync","mkdirSync","appendFile","concat","error","console","log","newLevel","Date","toString","fn","apply","logWithStack","customMessage","mainMessage","stackMessage","stack","slice","setLogLevel","enableFileLogging","logDest","logFile","endsWith","__dirname","fileURLToPath","URL","url","fixType","formats","outType","pop","find","t","handleResources","allowedProps","handledResources","correctResources","isCorrectJSON","readFileSync","files","propName","item","data","parsedData","JSON","stringify","deepCopy","copy","Array","isArray","key","prototype","hasOwnProperty","call","optionsStringify","allowFunctions","replaceAll","printUsage","bold","yellow","cycleCategories","option","entries","descName","green","i","blue","category","toUpperCase","red","toBoolean","wrapAround","replace","measureTime","start","hrtime","bigint","Number","generalOptions","getOptions","mergeConfigOptions","newOptions","mergedOptions","updateDefaultConfig","configObj","customObj","customValue","initOptions","items","recursiveProps","objectToUpdate","nestedNames","shift","assign","async","fetch","requestOptions","Promise","resolve","reject","protocol","https","http","getProtocol","get","headers","Referer","res","on","chunk","text","ExportError","Error","constructor","super","this","setError","statusCode","cache","activeManifest","sources","hcVersion","extractVersion","indexOf","fetchAndProcessScript","script","fetchedModules","shouldThrowError","response","updateCache","highchartsOptions","proxyOptions","sourcePath","proxyAgent","proxyHost","proxyPort","HttpsProxyAgent","agent","allFetchPromises","all","fetchScripts","c","m","writeFileSync","checkAndUpdateCache","manifestPath","requestUpdate","manifest","moduleMap","numberOfModules","some","moduleName","newManifest","saveConfigToManifest","getCachePath","setupHighcharts","Highcharts","animObject","duration","triggerExport","chartOptions","displayErrors","_displayErrors","merge","setOptions","wrap","setOptionsObj","chart","animation","strInj","isRenderComplete","Chart","proceed","userOptions","cb","exporting","enabled","plotOptions","series","label","tooltip","onHighchartsRender","addEvent","Series","Function","finalOptions","finalCallback","defaultOptions","prop","template","browser","newPage","page","setCacheEnabled","setPageContent","isClosed","$eval","element","errorMessage","innerHTML","setPageEvents","clearPageResources","injectedResources","resource","dispose","evaluate","oldCharts","charts","oldChart","destroy","scriptsToRemove","document","getElementsByTagName","stylesToRemove","linksToRemove","remove","setContent","waitUntil","addScriptTag","path","setAsConfig","puppeteerExport","exportOptions","debugger","isSVG","svgTemplate","injectedJs","js","push","content","isLocal","jsResource","injectedCss","css","cssImports","match","cssImportPath","cssResource","addStyleTag","addPageResources","size","svgElement","querySelector","chartHeight","baseVal","chartWidth","body","style","zoom","margin","viewportHeight","Math","abs","ceil","viewportWidth","x","y","getBoundingClientRect","trunc","getClipRegion","setViewport","deviceScaleFactor","outerHTML","createSVG","encoding","clip","race","screenshot","captureBeyondViewport","fullPage","optimizeForSpeed","quality","omitBackground","_resolve","setTimeout","createImage","emulateMediaType","pdf","createPDF","stats","performedExports","exportAttempts","exportFromSvgAttempts","timeSpent","droppedExports","spentAverage","poolConfig","factory","create","id","uuid","startDate","getTime","workCount","random","validate","workerHandle","close","initPool","puppeteerArgs","enabledDebug","debugOptions","launchOptions","userDataDir","handleSIGINT","handleSIGTERM","handleSIGHUP","waitForInitialPage","defaultViewport","tryCount","open","launch","createBrowser","parseInt","Pool","acquireTimeoutMillis","createTimeoutMillis","destroyTimeoutMillis","idleTimeoutMillis","createRetryIntervalMillis","reapIntervalMillis","propagateCreateError","r","hardReset","goto","clearPage","eventId","initialResources","acquire","promise","release","killPool","worker","used","destroyed","connected","closeBrowser","postWork","getPoolInfo","acquireCounter","payload","requestId","workStart","exportCounter","result","exportTime","getPoolInfoJSON","numFree","numUsed","available","pending","numPendingAcquires","pool$1","startExport","settings","endCallback","svg","initExportSettings","exportAsString","input","JSDOM","DOMPurify","sanitize","ADD_TAGS","FORBID_ATTR","doStraightInject","doExport","findChartSize","precision","multiplier","pow","roundNumber","sourceHeight","sourceWidth","param","chartJson","customLogicOptions","allowCodeExecutionScoped","optionsName","stringToExport","chartJSON","intervalIds","clearAllIntervals","clearInterval","logErrorMiddleware","req","next","returnErrorMiddleware","stCode","status","json","rateLimit","app","limitConfig","msg","rateOptions","limiter","windowMs","delayMs","handler","request","format","send","default","skip","query","access_token","use","HttpError","setStatus","vSwitchRoute","post","adminToken","token","newVersion","params","updateVersion","reversedMime","png","jpeg","gif","requestsCounter","beforeRequest","afterRequest","doCallbacks","callbacks","uniqueId","callResponse","exportHandler","stopCounter","connection","remoteAddress","b64","noDownload","connectionAborted","socket","hadErrors","toLowerCase","substr","pattern","isPrivateRangeUrlFound","info","removeAllListeners","Buffer","from","header","attachment","filename","pkgFile","pather","serverStartTime","successRates","addHealthRoutes","setInterval","successRatio","_","period","movingAverage","reduce","a","b","bootTime","uptime","floor","highchartsVersion","averageProcessingTime","failedExports","sucessRatio","toFixed","svgExportAttempts","jsonExportAttempts","activeServers","Map","express","disable","cors","_req","set","uploadLimitBytes","uploadLimitMiB","storage","multer","memoryStorage","upload","limits","fieldSize","limit","urlencoded","extended","none","attachServerErrorHandlers","startServer","serverConfig","httpServer","createServer","listen","cert","fsPromises","readFile","posix","httpsServer","NaN","static","healthRoute","exportRoutes","_request","sendFile","acceptRanges","uiRoute","errorHandler","closeServers","delete","getServers","enableRateLimiting","getExpress","getApp","middlewares","shutdownCleanUp","exitCode","allSettled","exit","index","initExport","loggingOptions","initLogging","code","singleExport","batchExport","batchFunctions","pair","configIndex","findIndex","arg","fileName","loadConfigFile","showUsage","propertiesChain","argumentType","pairArgumentValue","mapToNewConfig","oldOptions","manualConfig","configFileName","configFile","choice","prompts","onSubmit","p","categories","questionsCounter","allQuestions","section","prompt","answer","module","writeFile","printLogo","packageVersion"],"mappings":"0lBAeO,MAAMA,EAAe,CAC1BC,KAAM,CAAC,aAAc,kBAAmB,iBACxCC,QAAS,CACP,QACA,MACA,QACA,YACA,uBACA,gBAEA,eACA,QACA,OACA,aACA,mBACA,eACA,cACA,UACA,UACA,cACA,WACA,UACA,YACA,cACA,YACA,sBACA,SACA,SACA,WACA,aACA,YACA,eACA,yBACA,SACA,eACA,YACA,kBACA,SACA,cACA,mBACA,eACA,kBACA,cACA,eAEA,cACA,WACA,eACA,WACA,SACA,OACA,WACA,YACA,SACA,qBACA,aACA,WACA,WACA,WACA,WACA,eACA,UACA,kBACA,oBACA,aACA,UACA,cACA,YACA,YAEFC,WAAY,CAAC,kBACbC,OAAQ,CACN,wEACA,mGAMSC,EAAgB,CAC3BC,UAAW,CACTC,KAAM,CACJC,MAAO,CACL,mCACA,kBACA,0CACA,2BACA,kCACA,kCACA,wCACA,2CACA,qBACA,4BACA,2CACA,uDACA,6BACA,yBACA,0BACA,+BACA,uBACA,uFACA,yBACA,oCACA,oBACA,0BACA,8CACA,2BACA,0BACA,6BACA,mCACA,wCACA,mCACA,2BACA,kCACA,uBACA,iBACA,yBACA,8BACA,oBACA,2BACA,eACA,6BACA,iBACA,aACA,eACA,sBACA,cACA,yBACA,oBACA,uBAEFC,KAAM,WACNC,YAAa,0CAGjBC,WAAY,CACVC,QAAS,CACPJ,MAAO,SACPC,KAAM,SACNI,QAAS,qBACTH,YAAa,sCAEfI,OAAQ,CACNN,MAAO,+BACPC,KAAM,SACNI,QAAS,qBACTH,YAAa,kDAEfK,YAAa,CACXP,MAAOR,EAAaC,KACpBQ,KAAM,WACNI,QAAS,0BACTH,YAAa,yCAEfM,cAAe,CACbR,MAAOR,EAAaE,QACpBO,KAAM,WACNI,QAAS,4BACTH,YAAa,uCAEfO,iBAAkB,CAChBT,MAAOR,EAAaG,WACpBM,KAAM,WACNI,QAAS,+BACTH,YAAa,0CAEfQ,cAAe,CACbV,MAAOR,EAAaI,OACpBK,KAAM,WACNC,YAAa,uDAEfS,WAAY,CACVX,OAAO,EACPC,KAAM,UACNI,QAAS,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"}